// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart bindings for the Security framework on macOS.
class SecurityFramework {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SecurityFramework(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SecurityFramework.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Int, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(
          ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int length,
    ffi.Pointer<__CFAllocator> bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<__CFAllocator>)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<__CFAllocator>)>();

  CFDataRef CFDataCreateCopy(
    ffi.Pointer<__CFAllocator> allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              ffi.Pointer<__CFAllocator>, CFDataRef)>>('CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(ffi.Pointer<__CFAllocator>, CFDataRef)>();

  ffi.Pointer<__CFData> CFDataCreateMutable(
    ffi.Pointer<__CFAllocator> allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFData> Function(
              ffi.Pointer<__CFAllocator>, ffi.Long)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      ffi.Pointer<__CFData> Function(ffi.Pointer<__CFAllocator>, int)>();

  ffi.Pointer<__CFData> CFDataCreateMutableCopy(
    ffi.Pointer<__CFAllocator> allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFData> Function(ffi.Pointer<__CFAllocator>, ffi.Long,
              CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      ffi.Pointer<__CFData> Function(
          ffi.Pointer<__CFAllocator>, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<ffi.UnsignedChar> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.UnsignedChar> Function(CFDataRef)>>(
      'CFDataGetBytePtr');
  late final _CFDataGetBytePtr = _CFDataGetBytePtrPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(CFDataRef)>();

  ffi.Pointer<ffi.UnsignedChar> CFDataGetMutableBytePtr(
    ffi.Pointer<__CFData> theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<__CFData>)>>('CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<__CFData>)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<ffi.UnsignedChar> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDataRef, CFRange,
              ffi.Pointer<ffi.UnsignedChar>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<ffi.UnsignedChar>)>();

  void CFDataSetLength(
    ffi.Pointer<__CFData> theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<__CFData>, ffi.Long)>>(
      'CFDataSetLength');
  late final _CFDataSetLength = _CFDataSetLengthPtr.asFunction<
      void Function(ffi.Pointer<__CFData>, int)>();

  void CFDataIncreaseLength(
    ffi.Pointer<__CFData> theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<__CFData>, ffi.Long)>>(
      'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(ffi.Pointer<__CFData>, int)>();

  void CFDataAppendBytes(
    ffi.Pointer<__CFData> theData,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFData>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(
          ffi.Pointer<__CFData>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void CFDataReplaceBytes(
    ffi.Pointer<__CFData> theData,
    CFRange range,
    ffi.Pointer<ffi.UnsignedChar> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFData>, CFRange,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(ffi.Pointer<__CFData>, CFRange,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void CFDataDeleteBytes(
    ffi.Pointer<__CFData> theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<__CFData>, CFRange)>>(
      'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(ffi.Pointer<__CFData>, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    CFDataSearchFlags compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions.value,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.UnsignedLong)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    ffi.Pointer<__CFAllocator> allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(
              ffi.Pointer<__CFAllocator>, ffi.Double)>>('CFDateCreate');
  late final _CFDateCreate = _CFDateCreatePtr.asFunction<
      CFDateRef Function(ffi.Pointer<__CFAllocator>, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFDateRef, CFDateRef)>>(
          'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  CFComparisonResult CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return CFComparisonResult.fromValue(_CFDateCompare(
      theDate,
      otherDate,
      context,
    ));
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Long,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          ffi.Pointer<__CFAllocator>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    ffi.Pointer<__CFAllocator> allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(ffi.Pointer<__CFAllocator>,
              CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(ffi.Pointer<__CFAllocator>, CFDictionaryRef)>();

  ffi.Pointer<__CFDictionary> CFDictionaryCreateMutable(
    ffi.Pointer<__CFAllocator> allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<__CFDictionary> Function(
                  ffi.Pointer<__CFAllocator>,
                  ffi.Long,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          ffi.Pointer<__CFDictionary> Function(
              ffi.Pointer<__CFAllocator>,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  ffi.Pointer<__CFDictionary> CFDictionaryCreateMutableCopy(
    ffi.Pointer<__CFAllocator> allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFDictionary> Function(ffi.Pointer<__CFAllocator>,
              ffi.Long, CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          ffi.Pointer<__CFDictionary> Function(
              ffi.Pointer<__CFAllocator>, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedChar Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    ffi.Pointer<__CFDictionary> theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    ffi.Pointer<__CFDictionary> theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    ffi.Pointer<__CFDictionary> theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    ffi.Pointer<__CFDictionary> theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFDictionary>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(ffi.Pointer<__CFDictionary>, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    ffi.Pointer<__CFDictionary> theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<__CFDictionary>)>>(
      'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(ffi.Pointer<__CFDictionary>)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyType =
      _lookup<CFStringRef>('kSecPropertyKeyType');

  CFStringRef get kSecPropertyKeyType => _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLabel');

  CFStringRef get kSecPropertyKeyLabel => _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLocalizedLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLocalizedLabel');

  CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyValue =
      _lookup<CFStringRef>('kSecPropertyKeyValue');

  CFStringRef get kSecPropertyKeyValue => _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeWarning =
      _lookup<CFStringRef>('kSecPropertyTypeWarning');

  CFStringRef get kSecPropertyTypeWarning => _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<CFStringRef>('kSecPropertyTypeSuccess');

  CFStringRef get kSecPropertyTypeSuccess => _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSection =
      _lookup<CFStringRef>('kSecPropertyTypeSection');

  CFStringRef get kSecPropertyTypeSection => _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeData =
      _lookup<CFStringRef>('kSecPropertyTypeData');

  CFStringRef get kSecPropertyTypeData => _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeString =
      _lookup<CFStringRef>('kSecPropertyTypeString');

  CFStringRef get kSecPropertyTypeString => _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeURL =
      _lookup<CFStringRef>('kSecPropertyTypeURL');

  CFStringRef get kSecPropertyTypeURL => _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeDate =
      _lookup<CFStringRef>('kSecPropertyTypeDate');

  CFStringRef get kSecPropertyTypeDate => _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeArray =
      _lookup<CFStringRef>('kSecPropertyTypeArray');

  CFStringRef get kSecPropertyTypeArray => _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeNumber =
      _lookup<CFStringRef>('kSecPropertyTypeNumber');

  CFStringRef get kSecPropertyTypeNumber => _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate(
    CFTypeRef keychainOrArray,
    ffi.Pointer<__SecCertificate> certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(CFTypeRef, ffi.Pointer<__SecCertificate>,
                  ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(CFTypeRef, ffi.Pointer<__SecCertificate>,
              ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<ffi.Pointer<__SecCertificate>> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  SecIdentityRef, ffi.Pointer<ffi.Pointer<__SecCertificate>>)>>(
      'SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(
              SecIdentityRef, ffi.Pointer<ffi.Pointer<__SecCertificate>>)>();

  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<ffi.Pointer<__SecKey>> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  SecIdentityRef, ffi.Pointer<ffi.Pointer<__SecKey>>)>>(
      'SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey =
      _SecIdentityCopyPrivateKeyPtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<ffi.Pointer<__SecKey>>)>();

  int SecIdentityCopyPreference(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<__CFArray> validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CFStringRef, ffi.Uint32, ffi.Pointer<__CFArray>,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<__CFArray>,
              ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred(
    CFStringRef name,
    ffi.Pointer<__CFArray> keyUsage,
    ffi.Pointer<__CFArray> validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, ffi.Pointer<__CFArray>,
              ffi.Pointer<__CFArray>)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(
              CFStringRef, ffi.Pointer<__CFArray>, ffi.Pointer<__CFArray>)>();

  int SecIdentitySetPreference(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SecIdentityRef, CFStringRef,
              ffi.Uint32)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference = _SecIdentitySetPreferencePtr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    CFStringRef name,
    ffi.Pointer<__CFArray> keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SecIdentityRef, CFStringRef,
              ffi.Pointer<__CFArray>)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, CFStringRef, ffi.Pointer<__CFArray>)>();

  int SecIdentityCopySystemIdentity(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainDefault =
      _lookup<CFStringRef>('kSecIdentityDomainDefault');

  CFStringRef get kSecIdentityDomainDefault => _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainKerberosKDC =
      _lookup<CFStringRef>('kSecIdentityDomainKerberosKDC');

  CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  late final ffi.Pointer<ffi.Pointer<__CFBoolean>> _kCFBooleanTrue =
      _lookup<ffi.Pointer<__CFBoolean>>('kCFBooleanTrue');

  ffi.Pointer<__CFBoolean> get kCFBooleanTrue => _kCFBooleanTrue.value;

  late final ffi.Pointer<ffi.Pointer<__CFBoolean>> _kCFBooleanFalse =
      _lookup<ffi.Pointer<__CFBoolean>>('kCFBooleanFalse');

  ffi.Pointer<__CFBoolean> get kCFBooleanFalse => _kCFBooleanFalse.value;

  late final ffi.Pointer<CFStringRef> _kSecClass =
      _lookup<CFStringRef>('kSecClass');

  CFStringRef get kSecClass => _kSecClass.value;

  set kSecClass(CFStringRef value) => _kSecClass.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassInternetPassword =
      _lookup<CFStringRef>('kSecClassInternetPassword');

  CFStringRef get kSecClassInternetPassword => _kSecClassInternetPassword.value;

  set kSecClassInternetPassword(CFStringRef value) =>
      _kSecClassInternetPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassGenericPassword =
      _lookup<CFStringRef>('kSecClassGenericPassword');

  CFStringRef get kSecClassGenericPassword => _kSecClassGenericPassword.value;

  set kSecClassGenericPassword(CFStringRef value) =>
      _kSecClassGenericPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassCertificate =
      _lookup<CFStringRef>('kSecClassCertificate');

  CFStringRef get kSecClassCertificate => _kSecClassCertificate.value;

  set kSecClassCertificate(CFStringRef value) =>
      _kSecClassCertificate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassKey =
      _lookup<CFStringRef>('kSecClassKey');

  CFStringRef get kSecClassKey => _kSecClassKey.value;

  set kSecClassKey(CFStringRef value) => _kSecClassKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassIdentity =
      _lookup<CFStringRef>('kSecClassIdentity');

  CFStringRef get kSecClassIdentity => _kSecClassIdentity.value;

  set kSecClassIdentity(CFStringRef value) => _kSecClassIdentity.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessible =
      _lookup<CFStringRef>('kSecAttrAccessible');

  CFStringRef get kSecAttrAccessible => _kSecAttrAccessible.value;

  set kSecAttrAccessible(CFStringRef value) =>
      _kSecAttrAccessible.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccess =
      _lookup<CFStringRef>('kSecAttrAccess');

  CFStringRef get kSecAttrAccess => _kSecAttrAccess.value;

  set kSecAttrAccess(CFStringRef value) => _kSecAttrAccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessControl =
      _lookup<CFStringRef>('kSecAttrAccessControl');

  CFStringRef get kSecAttrAccessControl => _kSecAttrAccessControl.value;

  set kSecAttrAccessControl(CFStringRef value) =>
      _kSecAttrAccessControl.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessGroup =
      _lookup<CFStringRef>('kSecAttrAccessGroup');

  CFStringRef get kSecAttrAccessGroup => _kSecAttrAccessGroup.value;

  set kSecAttrAccessGroup(CFStringRef value) =>
      _kSecAttrAccessGroup.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSynchronizable =
      _lookup<CFStringRef>('kSecAttrSynchronizable');

  CFStringRef get kSecAttrSynchronizable => _kSecAttrSynchronizable.value;

  set kSecAttrSynchronizable(CFStringRef value) =>
      _kSecAttrSynchronizable.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSynchronizableAny =
      _lookup<CFStringRef>('kSecAttrSynchronizableAny');

  CFStringRef get kSecAttrSynchronizableAny => _kSecAttrSynchronizableAny.value;

  set kSecAttrSynchronizableAny(CFStringRef value) =>
      _kSecAttrSynchronizableAny.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCreationDate =
      _lookup<CFStringRef>('kSecAttrCreationDate');

  CFStringRef get kSecAttrCreationDate => _kSecAttrCreationDate.value;

  set kSecAttrCreationDate(CFStringRef value) =>
      _kSecAttrCreationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrModificationDate =
      _lookup<CFStringRef>('kSecAttrModificationDate');

  CFStringRef get kSecAttrModificationDate => _kSecAttrModificationDate.value;

  set kSecAttrModificationDate(CFStringRef value) =>
      _kSecAttrModificationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrDescription =
      _lookup<CFStringRef>('kSecAttrDescription');

  CFStringRef get kSecAttrDescription => _kSecAttrDescription.value;

  set kSecAttrDescription(CFStringRef value) =>
      _kSecAttrDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrComment =
      _lookup<CFStringRef>('kSecAttrComment');

  CFStringRef get kSecAttrComment => _kSecAttrComment.value;

  set kSecAttrComment(CFStringRef value) => _kSecAttrComment.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCreator =
      _lookup<CFStringRef>('kSecAttrCreator');

  CFStringRef get kSecAttrCreator => _kSecAttrCreator.value;

  set kSecAttrCreator(CFStringRef value) => _kSecAttrCreator.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrType =
      _lookup<CFStringRef>('kSecAttrType');

  CFStringRef get kSecAttrType => _kSecAttrType.value;

  set kSecAttrType(CFStringRef value) => _kSecAttrType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrLabel =
      _lookup<CFStringRef>('kSecAttrLabel');

  CFStringRef get kSecAttrLabel => _kSecAttrLabel.value;

  set kSecAttrLabel(CFStringRef value) => _kSecAttrLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIsInvisible =
      _lookup<CFStringRef>('kSecAttrIsInvisible');

  CFStringRef get kSecAttrIsInvisible => _kSecAttrIsInvisible.value;

  set kSecAttrIsInvisible(CFStringRef value) =>
      _kSecAttrIsInvisible.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIsNegative =
      _lookup<CFStringRef>('kSecAttrIsNegative');

  CFStringRef get kSecAttrIsNegative => _kSecAttrIsNegative.value;

  set kSecAttrIsNegative(CFStringRef value) =>
      _kSecAttrIsNegative.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccount =
      _lookup<CFStringRef>('kSecAttrAccount');

  CFStringRef get kSecAttrAccount => _kSecAttrAccount.value;

  set kSecAttrAccount(CFStringRef value) => _kSecAttrAccount.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrService =
      _lookup<CFStringRef>('kSecAttrService');

  CFStringRef get kSecAttrService => _kSecAttrService.value;

  set kSecAttrService(CFStringRef value) => _kSecAttrService.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrGeneric =
      _lookup<CFStringRef>('kSecAttrGeneric');

  CFStringRef get kSecAttrGeneric => _kSecAttrGeneric.value;

  set kSecAttrGeneric(CFStringRef value) => _kSecAttrGeneric.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSecurityDomain =
      _lookup<CFStringRef>('kSecAttrSecurityDomain');

  CFStringRef get kSecAttrSecurityDomain => _kSecAttrSecurityDomain.value;

  set kSecAttrSecurityDomain(CFStringRef value) =>
      _kSecAttrSecurityDomain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrServer =
      _lookup<CFStringRef>('kSecAttrServer');

  CFStringRef get kSecAttrServer => _kSecAttrServer.value;

  set kSecAttrServer(CFStringRef value) => _kSecAttrServer.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocol =
      _lookup<CFStringRef>('kSecAttrProtocol');

  CFStringRef get kSecAttrProtocol => _kSecAttrProtocol.value;

  set kSecAttrProtocol(CFStringRef value) => _kSecAttrProtocol.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationType =
      _lookup<CFStringRef>('kSecAttrAuthenticationType');

  CFStringRef get kSecAttrAuthenticationType =>
      _kSecAttrAuthenticationType.value;

  set kSecAttrAuthenticationType(CFStringRef value) =>
      _kSecAttrAuthenticationType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPort =
      _lookup<CFStringRef>('kSecAttrPort');

  CFStringRef get kSecAttrPort => _kSecAttrPort.value;

  set kSecAttrPort(CFStringRef value) => _kSecAttrPort.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPath =
      _lookup<CFStringRef>('kSecAttrPath');

  CFStringRef get kSecAttrPath => _kSecAttrPath.value;

  set kSecAttrPath(CFStringRef value) => _kSecAttrPath.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSubject =
      _lookup<CFStringRef>('kSecAttrSubject');

  CFStringRef get kSecAttrSubject => _kSecAttrSubject.value;

  set kSecAttrSubject(CFStringRef value) => _kSecAttrSubject.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIssuer =
      _lookup<CFStringRef>('kSecAttrIssuer');

  CFStringRef get kSecAttrIssuer => _kSecAttrIssuer.value;

  set kSecAttrIssuer(CFStringRef value) => _kSecAttrIssuer.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSerialNumber =
      _lookup<CFStringRef>('kSecAttrSerialNumber');

  CFStringRef get kSecAttrSerialNumber => _kSecAttrSerialNumber.value;

  set kSecAttrSerialNumber(CFStringRef value) =>
      _kSecAttrSerialNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSubjectKeyID =
      _lookup<CFStringRef>('kSecAttrSubjectKeyID');

  CFStringRef get kSecAttrSubjectKeyID => _kSecAttrSubjectKeyID.value;

  set kSecAttrSubjectKeyID(CFStringRef value) =>
      _kSecAttrSubjectKeyID.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPublicKeyHash =
      _lookup<CFStringRef>('kSecAttrPublicKeyHash');

  CFStringRef get kSecAttrPublicKeyHash => _kSecAttrPublicKeyHash.value;

  set kSecAttrPublicKeyHash(CFStringRef value) =>
      _kSecAttrPublicKeyHash.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCertificateType =
      _lookup<CFStringRef>('kSecAttrCertificateType');

  CFStringRef get kSecAttrCertificateType => _kSecAttrCertificateType.value;

  set kSecAttrCertificateType(CFStringRef value) =>
      _kSecAttrCertificateType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCertificateEncoding =
      _lookup<CFStringRef>('kSecAttrCertificateEncoding');

  CFStringRef get kSecAttrCertificateEncoding =>
      _kSecAttrCertificateEncoding.value;

  set kSecAttrCertificateEncoding(CFStringRef value) =>
      _kSecAttrCertificateEncoding.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyClass =
      _lookup<CFStringRef>('kSecAttrKeyClass');

  CFStringRef get kSecAttrKeyClass => _kSecAttrKeyClass.value;

  set kSecAttrKeyClass(CFStringRef value) => _kSecAttrKeyClass.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrApplicationLabel =
      _lookup<CFStringRef>('kSecAttrApplicationLabel');

  CFStringRef get kSecAttrApplicationLabel => _kSecAttrApplicationLabel.value;

  set kSecAttrApplicationLabel(CFStringRef value) =>
      _kSecAttrApplicationLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIsPermanent =
      _lookup<CFStringRef>('kSecAttrIsPermanent');

  CFStringRef get kSecAttrIsPermanent => _kSecAttrIsPermanent.value;

  set kSecAttrIsPermanent(CFStringRef value) =>
      _kSecAttrIsPermanent.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIsSensitive =
      _lookup<CFStringRef>('kSecAttrIsSensitive');

  CFStringRef get kSecAttrIsSensitive => _kSecAttrIsSensitive.value;

  set kSecAttrIsSensitive(CFStringRef value) =>
      _kSecAttrIsSensitive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrIsExtractable =
      _lookup<CFStringRef>('kSecAttrIsExtractable');

  CFStringRef get kSecAttrIsExtractable => _kSecAttrIsExtractable.value;

  set kSecAttrIsExtractable(CFStringRef value) =>
      _kSecAttrIsExtractable.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrApplicationTag =
      _lookup<CFStringRef>('kSecAttrApplicationTag');

  CFStringRef get kSecAttrApplicationTag => _kSecAttrApplicationTag.value;

  set kSecAttrApplicationTag(CFStringRef value) =>
      _kSecAttrApplicationTag.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyType =
      _lookup<CFStringRef>('kSecAttrKeyType');

  CFStringRef get kSecAttrKeyType => _kSecAttrKeyType.value;

  set kSecAttrKeyType(CFStringRef value) => _kSecAttrKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRF =
      _lookup<CFStringRef>('kSecAttrPRF');

  CFStringRef get kSecAttrPRF => _kSecAttrPRF.value;

  set kSecAttrPRF(CFStringRef value) => _kSecAttrPRF.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSalt =
      _lookup<CFStringRef>('kSecAttrSalt');

  CFStringRef get kSecAttrSalt => _kSecAttrSalt.value;

  set kSecAttrSalt(CFStringRef value) => _kSecAttrSalt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrRounds =
      _lookup<CFStringRef>('kSecAttrRounds');

  CFStringRef get kSecAttrRounds => _kSecAttrRounds.value;

  set kSecAttrRounds(CFStringRef value) => _kSecAttrRounds.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeySizeInBits =
      _lookup<CFStringRef>('kSecAttrKeySizeInBits');

  CFStringRef get kSecAttrKeySizeInBits => _kSecAttrKeySizeInBits.value;

  set kSecAttrKeySizeInBits(CFStringRef value) =>
      _kSecAttrKeySizeInBits.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrEffectiveKeySize =
      _lookup<CFStringRef>('kSecAttrEffectiveKeySize');

  CFStringRef get kSecAttrEffectiveKeySize => _kSecAttrEffectiveKeySize.value;

  set kSecAttrEffectiveKeySize(CFStringRef value) =>
      _kSecAttrEffectiveKeySize.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanEncrypt =
      _lookup<CFStringRef>('kSecAttrCanEncrypt');

  CFStringRef get kSecAttrCanEncrypt => _kSecAttrCanEncrypt.value;

  set kSecAttrCanEncrypt(CFStringRef value) =>
      _kSecAttrCanEncrypt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanDecrypt =
      _lookup<CFStringRef>('kSecAttrCanDecrypt');

  CFStringRef get kSecAttrCanDecrypt => _kSecAttrCanDecrypt.value;

  set kSecAttrCanDecrypt(CFStringRef value) =>
      _kSecAttrCanDecrypt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanDerive =
      _lookup<CFStringRef>('kSecAttrCanDerive');

  CFStringRef get kSecAttrCanDerive => _kSecAttrCanDerive.value;

  set kSecAttrCanDerive(CFStringRef value) => _kSecAttrCanDerive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanSign =
      _lookup<CFStringRef>('kSecAttrCanSign');

  CFStringRef get kSecAttrCanSign => _kSecAttrCanSign.value;

  set kSecAttrCanSign(CFStringRef value) => _kSecAttrCanSign.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanVerify =
      _lookup<CFStringRef>('kSecAttrCanVerify');

  CFStringRef get kSecAttrCanVerify => _kSecAttrCanVerify.value;

  set kSecAttrCanVerify(CFStringRef value) => _kSecAttrCanVerify.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanWrap =
      _lookup<CFStringRef>('kSecAttrCanWrap');

  CFStringRef get kSecAttrCanWrap => _kSecAttrCanWrap.value;

  set kSecAttrCanWrap(CFStringRef value) => _kSecAttrCanWrap.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrCanUnwrap =
      _lookup<CFStringRef>('kSecAttrCanUnwrap');

  CFStringRef get kSecAttrCanUnwrap => _kSecAttrCanUnwrap.value;

  set kSecAttrCanUnwrap(CFStringRef value) => _kSecAttrCanUnwrap.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrSyncViewHint =
      _lookup<CFStringRef>('kSecAttrSyncViewHint');

  CFStringRef get kSecAttrSyncViewHint => _kSecAttrSyncViewHint.value;

  set kSecAttrSyncViewHint(CFStringRef value) =>
      _kSecAttrSyncViewHint.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrTokenID =
      _lookup<CFStringRef>('kSecAttrTokenID');

  CFStringRef get kSecAttrTokenID => _kSecAttrTokenID.value;

  set kSecAttrTokenID(CFStringRef value) => _kSecAttrTokenID.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPersistantReference =
      _lookup<CFStringRef>('kSecAttrPersistantReference');

  CFStringRef get kSecAttrPersistantReference =>
      _kSecAttrPersistantReference.value;

  set kSecAttrPersistantReference(CFStringRef value) =>
      _kSecAttrPersistantReference.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPersistentReference =
      _lookup<CFStringRef>('kSecAttrPersistentReference');

  CFStringRef get kSecAttrPersistentReference =>
      _kSecAttrPersistentReference.value;

  set kSecAttrPersistentReference(CFStringRef value) =>
      _kSecAttrPersistentReference.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessibleWhenUnlocked =
      _lookup<CFStringRef>('kSecAttrAccessibleWhenUnlocked');

  CFStringRef get kSecAttrAccessibleWhenUnlocked =>
      _kSecAttrAccessibleWhenUnlocked.value;

  set kSecAttrAccessibleWhenUnlocked(CFStringRef value) =>
      _kSecAttrAccessibleWhenUnlocked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessibleAfterFirstUnlock =
      _lookup<CFStringRef>('kSecAttrAccessibleAfterFirstUnlock');

  CFStringRef get kSecAttrAccessibleAfterFirstUnlock =>
      _kSecAttrAccessibleAfterFirstUnlock.value;

  set kSecAttrAccessibleAfterFirstUnlock(CFStringRef value) =>
      _kSecAttrAccessibleAfterFirstUnlock.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessibleAlways =
      _lookup<CFStringRef>('kSecAttrAccessibleAlways');

  CFStringRef get kSecAttrAccessibleAlways => _kSecAttrAccessibleAlways.value;

  set kSecAttrAccessibleAlways(CFStringRef value) =>
      _kSecAttrAccessibleAlways.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly =
      _lookup<CFStringRef>('kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly');

  CFStringRef get kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly =>
      _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.value;

  set kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly(CFStringRef value) =>
      _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly =
      _lookup<CFStringRef>('kSecAttrAccessibleWhenUnlockedThisDeviceOnly');

  CFStringRef get kSecAttrAccessibleWhenUnlockedThisDeviceOnly =>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly.value;

  set kSecAttrAccessibleWhenUnlockedThisDeviceOnly(CFStringRef value) =>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly =
      _lookup<CFStringRef>('kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly');

  CFStringRef get kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly =>
      _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly.value;

  set kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly(CFStringRef value) =>
      _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessibleAlwaysThisDeviceOnly =
      _lookup<CFStringRef>('kSecAttrAccessibleAlwaysThisDeviceOnly');

  CFStringRef get kSecAttrAccessibleAlwaysThisDeviceOnly =>
      _kSecAttrAccessibleAlwaysThisDeviceOnly.value;

  set kSecAttrAccessibleAlwaysThisDeviceOnly(CFStringRef value) =>
      _kSecAttrAccessibleAlwaysThisDeviceOnly.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolFTP =
      _lookup<CFStringRef>('kSecAttrProtocolFTP');

  CFStringRef get kSecAttrProtocolFTP => _kSecAttrProtocolFTP.value;

  set kSecAttrProtocolFTP(CFStringRef value) =>
      _kSecAttrProtocolFTP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolFTPAccount =
      _lookup<CFStringRef>('kSecAttrProtocolFTPAccount');

  CFStringRef get kSecAttrProtocolFTPAccount =>
      _kSecAttrProtocolFTPAccount.value;

  set kSecAttrProtocolFTPAccount(CFStringRef value) =>
      _kSecAttrProtocolFTPAccount.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolHTTP =
      _lookup<CFStringRef>('kSecAttrProtocolHTTP');

  CFStringRef get kSecAttrProtocolHTTP => _kSecAttrProtocolHTTP.value;

  set kSecAttrProtocolHTTP(CFStringRef value) =>
      _kSecAttrProtocolHTTP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolIRC =
      _lookup<CFStringRef>('kSecAttrProtocolIRC');

  CFStringRef get kSecAttrProtocolIRC => _kSecAttrProtocolIRC.value;

  set kSecAttrProtocolIRC(CFStringRef value) =>
      _kSecAttrProtocolIRC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolNNTP =
      _lookup<CFStringRef>('kSecAttrProtocolNNTP');

  CFStringRef get kSecAttrProtocolNNTP => _kSecAttrProtocolNNTP.value;

  set kSecAttrProtocolNNTP(CFStringRef value) =>
      _kSecAttrProtocolNNTP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolPOP3 =
      _lookup<CFStringRef>('kSecAttrProtocolPOP3');

  CFStringRef get kSecAttrProtocolPOP3 => _kSecAttrProtocolPOP3.value;

  set kSecAttrProtocolPOP3(CFStringRef value) =>
      _kSecAttrProtocolPOP3.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolSMTP =
      _lookup<CFStringRef>('kSecAttrProtocolSMTP');

  CFStringRef get kSecAttrProtocolSMTP => _kSecAttrProtocolSMTP.value;

  set kSecAttrProtocolSMTP(CFStringRef value) =>
      _kSecAttrProtocolSMTP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolSOCKS =
      _lookup<CFStringRef>('kSecAttrProtocolSOCKS');

  CFStringRef get kSecAttrProtocolSOCKS => _kSecAttrProtocolSOCKS.value;

  set kSecAttrProtocolSOCKS(CFStringRef value) =>
      _kSecAttrProtocolSOCKS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolIMAP =
      _lookup<CFStringRef>('kSecAttrProtocolIMAP');

  CFStringRef get kSecAttrProtocolIMAP => _kSecAttrProtocolIMAP.value;

  set kSecAttrProtocolIMAP(CFStringRef value) =>
      _kSecAttrProtocolIMAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolLDAP =
      _lookup<CFStringRef>('kSecAttrProtocolLDAP');

  CFStringRef get kSecAttrProtocolLDAP => _kSecAttrProtocolLDAP.value;

  set kSecAttrProtocolLDAP(CFStringRef value) =>
      _kSecAttrProtocolLDAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolAppleTalk =
      _lookup<CFStringRef>('kSecAttrProtocolAppleTalk');

  CFStringRef get kSecAttrProtocolAppleTalk => _kSecAttrProtocolAppleTalk.value;

  set kSecAttrProtocolAppleTalk(CFStringRef value) =>
      _kSecAttrProtocolAppleTalk.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolAFP =
      _lookup<CFStringRef>('kSecAttrProtocolAFP');

  CFStringRef get kSecAttrProtocolAFP => _kSecAttrProtocolAFP.value;

  set kSecAttrProtocolAFP(CFStringRef value) =>
      _kSecAttrProtocolAFP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolTelnet =
      _lookup<CFStringRef>('kSecAttrProtocolTelnet');

  CFStringRef get kSecAttrProtocolTelnet => _kSecAttrProtocolTelnet.value;

  set kSecAttrProtocolTelnet(CFStringRef value) =>
      _kSecAttrProtocolTelnet.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolSSH =
      _lookup<CFStringRef>('kSecAttrProtocolSSH');

  CFStringRef get kSecAttrProtocolSSH => _kSecAttrProtocolSSH.value;

  set kSecAttrProtocolSSH(CFStringRef value) =>
      _kSecAttrProtocolSSH.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolFTPS =
      _lookup<CFStringRef>('kSecAttrProtocolFTPS');

  CFStringRef get kSecAttrProtocolFTPS => _kSecAttrProtocolFTPS.value;

  set kSecAttrProtocolFTPS(CFStringRef value) =>
      _kSecAttrProtocolFTPS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolHTTPS =
      _lookup<CFStringRef>('kSecAttrProtocolHTTPS');

  CFStringRef get kSecAttrProtocolHTTPS => _kSecAttrProtocolHTTPS.value;

  set kSecAttrProtocolHTTPS(CFStringRef value) =>
      _kSecAttrProtocolHTTPS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolHTTPProxy =
      _lookup<CFStringRef>('kSecAttrProtocolHTTPProxy');

  CFStringRef get kSecAttrProtocolHTTPProxy => _kSecAttrProtocolHTTPProxy.value;

  set kSecAttrProtocolHTTPProxy(CFStringRef value) =>
      _kSecAttrProtocolHTTPProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolHTTPSProxy =
      _lookup<CFStringRef>('kSecAttrProtocolHTTPSProxy');

  CFStringRef get kSecAttrProtocolHTTPSProxy =>
      _kSecAttrProtocolHTTPSProxy.value;

  set kSecAttrProtocolHTTPSProxy(CFStringRef value) =>
      _kSecAttrProtocolHTTPSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolFTPProxy =
      _lookup<CFStringRef>('kSecAttrProtocolFTPProxy');

  CFStringRef get kSecAttrProtocolFTPProxy => _kSecAttrProtocolFTPProxy.value;

  set kSecAttrProtocolFTPProxy(CFStringRef value) =>
      _kSecAttrProtocolFTPProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolSMB =
      _lookup<CFStringRef>('kSecAttrProtocolSMB');

  CFStringRef get kSecAttrProtocolSMB => _kSecAttrProtocolSMB.value;

  set kSecAttrProtocolSMB(CFStringRef value) =>
      _kSecAttrProtocolSMB.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolRTSP =
      _lookup<CFStringRef>('kSecAttrProtocolRTSP');

  CFStringRef get kSecAttrProtocolRTSP => _kSecAttrProtocolRTSP.value;

  set kSecAttrProtocolRTSP(CFStringRef value) =>
      _kSecAttrProtocolRTSP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolRTSPProxy =
      _lookup<CFStringRef>('kSecAttrProtocolRTSPProxy');

  CFStringRef get kSecAttrProtocolRTSPProxy => _kSecAttrProtocolRTSPProxy.value;

  set kSecAttrProtocolRTSPProxy(CFStringRef value) =>
      _kSecAttrProtocolRTSPProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolDAAP =
      _lookup<CFStringRef>('kSecAttrProtocolDAAP');

  CFStringRef get kSecAttrProtocolDAAP => _kSecAttrProtocolDAAP.value;

  set kSecAttrProtocolDAAP(CFStringRef value) =>
      _kSecAttrProtocolDAAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolEPPC =
      _lookup<CFStringRef>('kSecAttrProtocolEPPC');

  CFStringRef get kSecAttrProtocolEPPC => _kSecAttrProtocolEPPC.value;

  set kSecAttrProtocolEPPC(CFStringRef value) =>
      _kSecAttrProtocolEPPC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolIPP =
      _lookup<CFStringRef>('kSecAttrProtocolIPP');

  CFStringRef get kSecAttrProtocolIPP => _kSecAttrProtocolIPP.value;

  set kSecAttrProtocolIPP(CFStringRef value) =>
      _kSecAttrProtocolIPP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolNNTPS =
      _lookup<CFStringRef>('kSecAttrProtocolNNTPS');

  CFStringRef get kSecAttrProtocolNNTPS => _kSecAttrProtocolNNTPS.value;

  set kSecAttrProtocolNNTPS(CFStringRef value) =>
      _kSecAttrProtocolNNTPS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolLDAPS =
      _lookup<CFStringRef>('kSecAttrProtocolLDAPS');

  CFStringRef get kSecAttrProtocolLDAPS => _kSecAttrProtocolLDAPS.value;

  set kSecAttrProtocolLDAPS(CFStringRef value) =>
      _kSecAttrProtocolLDAPS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolTelnetS =
      _lookup<CFStringRef>('kSecAttrProtocolTelnetS');

  CFStringRef get kSecAttrProtocolTelnetS => _kSecAttrProtocolTelnetS.value;

  set kSecAttrProtocolTelnetS(CFStringRef value) =>
      _kSecAttrProtocolTelnetS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolIMAPS =
      _lookup<CFStringRef>('kSecAttrProtocolIMAPS');

  CFStringRef get kSecAttrProtocolIMAPS => _kSecAttrProtocolIMAPS.value;

  set kSecAttrProtocolIMAPS(CFStringRef value) =>
      _kSecAttrProtocolIMAPS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolIRCS =
      _lookup<CFStringRef>('kSecAttrProtocolIRCS');

  CFStringRef get kSecAttrProtocolIRCS => _kSecAttrProtocolIRCS.value;

  set kSecAttrProtocolIRCS(CFStringRef value) =>
      _kSecAttrProtocolIRCS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrProtocolPOP3S =
      _lookup<CFStringRef>('kSecAttrProtocolPOP3S');

  CFStringRef get kSecAttrProtocolPOP3S => _kSecAttrProtocolPOP3S.value;

  set kSecAttrProtocolPOP3S(CFStringRef value) =>
      _kSecAttrProtocolPOP3S.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeNTLM =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeNTLM');

  CFStringRef get kSecAttrAuthenticationTypeNTLM =>
      _kSecAttrAuthenticationTypeNTLM.value;

  set kSecAttrAuthenticationTypeNTLM(CFStringRef value) =>
      _kSecAttrAuthenticationTypeNTLM.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeMSN =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeMSN');

  CFStringRef get kSecAttrAuthenticationTypeMSN =>
      _kSecAttrAuthenticationTypeMSN.value;

  set kSecAttrAuthenticationTypeMSN(CFStringRef value) =>
      _kSecAttrAuthenticationTypeMSN.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeDPA =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeDPA');

  CFStringRef get kSecAttrAuthenticationTypeDPA =>
      _kSecAttrAuthenticationTypeDPA.value;

  set kSecAttrAuthenticationTypeDPA(CFStringRef value) =>
      _kSecAttrAuthenticationTypeDPA.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeRPA =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeRPA');

  CFStringRef get kSecAttrAuthenticationTypeRPA =>
      _kSecAttrAuthenticationTypeRPA.value;

  set kSecAttrAuthenticationTypeRPA(CFStringRef value) =>
      _kSecAttrAuthenticationTypeRPA.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeHTTPBasic =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeHTTPBasic');

  CFStringRef get kSecAttrAuthenticationTypeHTTPBasic =>
      _kSecAttrAuthenticationTypeHTTPBasic.value;

  set kSecAttrAuthenticationTypeHTTPBasic(CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTTPBasic.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeHTTPDigest =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeHTTPDigest');

  CFStringRef get kSecAttrAuthenticationTypeHTTPDigest =>
      _kSecAttrAuthenticationTypeHTTPDigest.value;

  set kSecAttrAuthenticationTypeHTTPDigest(CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTTPDigest.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeHTMLForm =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeHTMLForm');

  CFStringRef get kSecAttrAuthenticationTypeHTMLForm =>
      _kSecAttrAuthenticationTypeHTMLForm.value;

  set kSecAttrAuthenticationTypeHTMLForm(CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTMLForm.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAuthenticationTypeDefault =
      _lookup<CFStringRef>('kSecAttrAuthenticationTypeDefault');

  CFStringRef get kSecAttrAuthenticationTypeDefault =>
      _kSecAttrAuthenticationTypeDefault.value;

  set kSecAttrAuthenticationTypeDefault(CFStringRef value) =>
      _kSecAttrAuthenticationTypeDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyClassPublic =
      _lookup<CFStringRef>('kSecAttrKeyClassPublic');

  CFStringRef get kSecAttrKeyClassPublic => _kSecAttrKeyClassPublic.value;

  set kSecAttrKeyClassPublic(CFStringRef value) =>
      _kSecAttrKeyClassPublic.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyClassPrivate =
      _lookup<CFStringRef>('kSecAttrKeyClassPrivate');

  CFStringRef get kSecAttrKeyClassPrivate => _kSecAttrKeyClassPrivate.value;

  set kSecAttrKeyClassPrivate(CFStringRef value) =>
      _kSecAttrKeyClassPrivate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyClassSymmetric =
      _lookup<CFStringRef>('kSecAttrKeyClassSymmetric');

  CFStringRef get kSecAttrKeyClassSymmetric => _kSecAttrKeyClassSymmetric.value;

  set kSecAttrKeyClassSymmetric(CFStringRef value) =>
      _kSecAttrKeyClassSymmetric.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeRSA =
      _lookup<CFStringRef>('kSecAttrKeyTypeRSA');

  CFStringRef get kSecAttrKeyTypeRSA => _kSecAttrKeyTypeRSA.value;

  set kSecAttrKeyTypeRSA(CFStringRef value) =>
      _kSecAttrKeyTypeRSA.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeDSA =
      _lookup<CFStringRef>('kSecAttrKeyTypeDSA');

  CFStringRef get kSecAttrKeyTypeDSA => _kSecAttrKeyTypeDSA.value;

  set kSecAttrKeyTypeDSA(CFStringRef value) =>
      _kSecAttrKeyTypeDSA.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeAES =
      _lookup<CFStringRef>('kSecAttrKeyTypeAES');

  CFStringRef get kSecAttrKeyTypeAES => _kSecAttrKeyTypeAES.value;

  set kSecAttrKeyTypeAES(CFStringRef value) =>
      _kSecAttrKeyTypeAES.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeDES =
      _lookup<CFStringRef>('kSecAttrKeyTypeDES');

  CFStringRef get kSecAttrKeyTypeDES => _kSecAttrKeyTypeDES.value;

  set kSecAttrKeyTypeDES(CFStringRef value) =>
      _kSecAttrKeyTypeDES.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyType3DES =
      _lookup<CFStringRef>('kSecAttrKeyType3DES');

  CFStringRef get kSecAttrKeyType3DES => _kSecAttrKeyType3DES.value;

  set kSecAttrKeyType3DES(CFStringRef value) =>
      _kSecAttrKeyType3DES.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeRC4 =
      _lookup<CFStringRef>('kSecAttrKeyTypeRC4');

  CFStringRef get kSecAttrKeyTypeRC4 => _kSecAttrKeyTypeRC4.value;

  set kSecAttrKeyTypeRC4(CFStringRef value) =>
      _kSecAttrKeyTypeRC4.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeRC2 =
      _lookup<CFStringRef>('kSecAttrKeyTypeRC2');

  CFStringRef get kSecAttrKeyTypeRC2 => _kSecAttrKeyTypeRC2.value;

  set kSecAttrKeyTypeRC2(CFStringRef value) =>
      _kSecAttrKeyTypeRC2.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeCAST =
      _lookup<CFStringRef>('kSecAttrKeyTypeCAST');

  CFStringRef get kSecAttrKeyTypeCAST => _kSecAttrKeyTypeCAST.value;

  set kSecAttrKeyTypeCAST(CFStringRef value) =>
      _kSecAttrKeyTypeCAST.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeECDSA =
      _lookup<CFStringRef>('kSecAttrKeyTypeECDSA');

  CFStringRef get kSecAttrKeyTypeECDSA => _kSecAttrKeyTypeECDSA.value;

  set kSecAttrKeyTypeECDSA(CFStringRef value) =>
      _kSecAttrKeyTypeECDSA.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeEC =
      _lookup<CFStringRef>('kSecAttrKeyTypeEC');

  CFStringRef get kSecAttrKeyTypeEC => _kSecAttrKeyTypeEC.value;

  set kSecAttrKeyTypeEC(CFStringRef value) => _kSecAttrKeyTypeEC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrKeyTypeECSECPrimeRandom =
      _lookup<CFStringRef>('kSecAttrKeyTypeECSECPrimeRandom');

  CFStringRef get kSecAttrKeyTypeECSECPrimeRandom =>
      _kSecAttrKeyTypeECSECPrimeRandom.value;

  set kSecAttrKeyTypeECSECPrimeRandom(CFStringRef value) =>
      _kSecAttrKeyTypeECSECPrimeRandom.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRFHmacAlgSHA1 =
      _lookup<CFStringRef>('kSecAttrPRFHmacAlgSHA1');

  CFStringRef get kSecAttrPRFHmacAlgSHA1 => _kSecAttrPRFHmacAlgSHA1.value;

  set kSecAttrPRFHmacAlgSHA1(CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA1.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRFHmacAlgSHA224 =
      _lookup<CFStringRef>('kSecAttrPRFHmacAlgSHA224');

  CFStringRef get kSecAttrPRFHmacAlgSHA224 => _kSecAttrPRFHmacAlgSHA224.value;

  set kSecAttrPRFHmacAlgSHA224(CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA224.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRFHmacAlgSHA256 =
      _lookup<CFStringRef>('kSecAttrPRFHmacAlgSHA256');

  CFStringRef get kSecAttrPRFHmacAlgSHA256 => _kSecAttrPRFHmacAlgSHA256.value;

  set kSecAttrPRFHmacAlgSHA256(CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA256.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRFHmacAlgSHA384 =
      _lookup<CFStringRef>('kSecAttrPRFHmacAlgSHA384');

  CFStringRef get kSecAttrPRFHmacAlgSHA384 => _kSecAttrPRFHmacAlgSHA384.value;

  set kSecAttrPRFHmacAlgSHA384(CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA384.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrPRFHmacAlgSHA512 =
      _lookup<CFStringRef>('kSecAttrPRFHmacAlgSHA512');

  CFStringRef get kSecAttrPRFHmacAlgSHA512 => _kSecAttrPRFHmacAlgSHA512.value;

  set kSecAttrPRFHmacAlgSHA512(CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA512.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchPolicy =
      _lookup<CFStringRef>('kSecMatchPolicy');

  CFStringRef get kSecMatchPolicy => _kSecMatchPolicy.value;

  set kSecMatchPolicy(CFStringRef value) => _kSecMatchPolicy.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchItemList =
      _lookup<CFStringRef>('kSecMatchItemList');

  CFStringRef get kSecMatchItemList => _kSecMatchItemList.value;

  set kSecMatchItemList(CFStringRef value) => _kSecMatchItemList.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchSearchList =
      _lookup<CFStringRef>('kSecMatchSearchList');

  CFStringRef get kSecMatchSearchList => _kSecMatchSearchList.value;

  set kSecMatchSearchList(CFStringRef value) =>
      _kSecMatchSearchList.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchIssuers =
      _lookup<CFStringRef>('kSecMatchIssuers');

  CFStringRef get kSecMatchIssuers => _kSecMatchIssuers.value;

  set kSecMatchIssuers(CFStringRef value) => _kSecMatchIssuers.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchEmailAddressIfPresent =
      _lookup<CFStringRef>('kSecMatchEmailAddressIfPresent');

  CFStringRef get kSecMatchEmailAddressIfPresent =>
      _kSecMatchEmailAddressIfPresent.value;

  set kSecMatchEmailAddressIfPresent(CFStringRef value) =>
      _kSecMatchEmailAddressIfPresent.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchSubjectContains =
      _lookup<CFStringRef>('kSecMatchSubjectContains');

  CFStringRef get kSecMatchSubjectContains => _kSecMatchSubjectContains.value;

  set kSecMatchSubjectContains(CFStringRef value) =>
      _kSecMatchSubjectContains.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchHostOrSubdomainOfHost =
      _lookup<CFStringRef>('kSecMatchHostOrSubdomainOfHost');

  CFStringRef get kSecMatchHostOrSubdomainOfHost =>
      _kSecMatchHostOrSubdomainOfHost.value;

  set kSecMatchHostOrSubdomainOfHost(CFStringRef value) =>
      _kSecMatchHostOrSubdomainOfHost.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchSubjectStartsWith =
      _lookup<CFStringRef>('kSecMatchSubjectStartsWith');

  CFStringRef get kSecMatchSubjectStartsWith =>
      _kSecMatchSubjectStartsWith.value;

  set kSecMatchSubjectStartsWith(CFStringRef value) =>
      _kSecMatchSubjectStartsWith.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchSubjectEndsWith =
      _lookup<CFStringRef>('kSecMatchSubjectEndsWith');

  CFStringRef get kSecMatchSubjectEndsWith => _kSecMatchSubjectEndsWith.value;

  set kSecMatchSubjectEndsWith(CFStringRef value) =>
      _kSecMatchSubjectEndsWith.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchSubjectWholeString =
      _lookup<CFStringRef>('kSecMatchSubjectWholeString');

  CFStringRef get kSecMatchSubjectWholeString =>
      _kSecMatchSubjectWholeString.value;

  set kSecMatchSubjectWholeString(CFStringRef value) =>
      _kSecMatchSubjectWholeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchCaseInsensitive =
      _lookup<CFStringRef>('kSecMatchCaseInsensitive');

  CFStringRef get kSecMatchCaseInsensitive => _kSecMatchCaseInsensitive.value;

  set kSecMatchCaseInsensitive(CFStringRef value) =>
      _kSecMatchCaseInsensitive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchDiacriticInsensitive =
      _lookup<CFStringRef>('kSecMatchDiacriticInsensitive');

  CFStringRef get kSecMatchDiacriticInsensitive =>
      _kSecMatchDiacriticInsensitive.value;

  set kSecMatchDiacriticInsensitive(CFStringRef value) =>
      _kSecMatchDiacriticInsensitive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchWidthInsensitive =
      _lookup<CFStringRef>('kSecMatchWidthInsensitive');

  CFStringRef get kSecMatchWidthInsensitive => _kSecMatchWidthInsensitive.value;

  set kSecMatchWidthInsensitive(CFStringRef value) =>
      _kSecMatchWidthInsensitive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchTrustedOnly =
      _lookup<CFStringRef>('kSecMatchTrustedOnly');

  CFStringRef get kSecMatchTrustedOnly => _kSecMatchTrustedOnly.value;

  set kSecMatchTrustedOnly(CFStringRef value) =>
      _kSecMatchTrustedOnly.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchValidOnDate =
      _lookup<CFStringRef>('kSecMatchValidOnDate');

  CFStringRef get kSecMatchValidOnDate => _kSecMatchValidOnDate.value;

  set kSecMatchValidOnDate(CFStringRef value) =>
      _kSecMatchValidOnDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchLimit =
      _lookup<CFStringRef>('kSecMatchLimit');

  CFStringRef get kSecMatchLimit => _kSecMatchLimit.value;

  set kSecMatchLimit(CFStringRef value) => _kSecMatchLimit.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchLimitOne =
      _lookup<CFStringRef>('kSecMatchLimitOne');

  CFStringRef get kSecMatchLimitOne => _kSecMatchLimitOne.value;

  set kSecMatchLimitOne(CFStringRef value) => _kSecMatchLimitOne.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchLimitAll =
      _lookup<CFStringRef>('kSecMatchLimitAll');

  CFStringRef get kSecMatchLimitAll => _kSecMatchLimitAll.value;

  set kSecMatchLimitAll(CFStringRef value) => _kSecMatchLimitAll.value = value;

  late final ffi.Pointer<CFStringRef> _kSecReturnData =
      _lookup<CFStringRef>('kSecReturnData');

  CFStringRef get kSecReturnData => _kSecReturnData.value;

  set kSecReturnData(CFStringRef value) => _kSecReturnData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecReturnAttributes =
      _lookup<CFStringRef>('kSecReturnAttributes');

  CFStringRef get kSecReturnAttributes => _kSecReturnAttributes.value;

  set kSecReturnAttributes(CFStringRef value) =>
      _kSecReturnAttributes.value = value;

  late final ffi.Pointer<CFStringRef> _kSecReturnRef =
      _lookup<CFStringRef>('kSecReturnRef');

  CFStringRef get kSecReturnRef => _kSecReturnRef.value;

  set kSecReturnRef(CFStringRef value) => _kSecReturnRef.value = value;

  late final ffi.Pointer<CFStringRef> _kSecReturnPersistentRef =
      _lookup<CFStringRef>('kSecReturnPersistentRef');

  CFStringRef get kSecReturnPersistentRef => _kSecReturnPersistentRef.value;

  set kSecReturnPersistentRef(CFStringRef value) =>
      _kSecReturnPersistentRef.value = value;

  late final ffi.Pointer<CFStringRef> _kSecValueData =
      _lookup<CFStringRef>('kSecValueData');

  CFStringRef get kSecValueData => _kSecValueData.value;

  set kSecValueData(CFStringRef value) => _kSecValueData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecValueRef =
      _lookup<CFStringRef>('kSecValueRef');

  CFStringRef get kSecValueRef => _kSecValueRef.value;

  set kSecValueRef(CFStringRef value) => _kSecValueRef.value = value;

  late final ffi.Pointer<CFStringRef> _kSecValuePersistentRef =
      _lookup<CFStringRef>('kSecValuePersistentRef');

  CFStringRef get kSecValuePersistentRef => _kSecValuePersistentRef.value;

  set kSecValuePersistentRef(CFStringRef value) =>
      _kSecValuePersistentRef.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseItemList =
      _lookup<CFStringRef>('kSecUseItemList');

  CFStringRef get kSecUseItemList => _kSecUseItemList.value;

  set kSecUseItemList(CFStringRef value) => _kSecUseItemList.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseKeychain =
      _lookup<CFStringRef>('kSecUseKeychain');

  CFStringRef get kSecUseKeychain => _kSecUseKeychain.value;

  set kSecUseKeychain(CFStringRef value) => _kSecUseKeychain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseOperationPrompt =
      _lookup<CFStringRef>('kSecUseOperationPrompt');

  CFStringRef get kSecUseOperationPrompt => _kSecUseOperationPrompt.value;

  set kSecUseOperationPrompt(CFStringRef value) =>
      _kSecUseOperationPrompt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseNoAuthenticationUI =
      _lookup<CFStringRef>('kSecUseNoAuthenticationUI');

  CFStringRef get kSecUseNoAuthenticationUI => _kSecUseNoAuthenticationUI.value;

  set kSecUseNoAuthenticationUI(CFStringRef value) =>
      _kSecUseNoAuthenticationUI.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseAuthenticationUI =
      _lookup<CFStringRef>('kSecUseAuthenticationUI');

  CFStringRef get kSecUseAuthenticationUI => _kSecUseAuthenticationUI.value;

  set kSecUseAuthenticationUI(CFStringRef value) =>
      _kSecUseAuthenticationUI.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseAuthenticationContext =
      _lookup<CFStringRef>('kSecUseAuthenticationContext');

  CFStringRef get kSecUseAuthenticationContext =>
      _kSecUseAuthenticationContext.value;

  set kSecUseAuthenticationContext(CFStringRef value) =>
      _kSecUseAuthenticationContext.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseDataProtectionKeychain =
      _lookup<CFStringRef>('kSecUseDataProtectionKeychain');

  CFStringRef get kSecUseDataProtectionKeychain =>
      _kSecUseDataProtectionKeychain.value;

  set kSecUseDataProtectionKeychain(CFStringRef value) =>
      _kSecUseDataProtectionKeychain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseUserIndependentKeychain =
      _lookup<CFStringRef>('kSecUseUserIndependentKeychain');

  CFStringRef get kSecUseUserIndependentKeychain =>
      _kSecUseUserIndependentKeychain.value;

  set kSecUseUserIndependentKeychain(CFStringRef value) =>
      _kSecUseUserIndependentKeychain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseAuthenticationUIAllow =
      _lookup<CFStringRef>('kSecUseAuthenticationUIAllow');

  CFStringRef get kSecUseAuthenticationUIAllow =>
      _kSecUseAuthenticationUIAllow.value;

  set kSecUseAuthenticationUIAllow(CFStringRef value) =>
      _kSecUseAuthenticationUIAllow.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseAuthenticationUIFail =
      _lookup<CFStringRef>('kSecUseAuthenticationUIFail');

  CFStringRef get kSecUseAuthenticationUIFail =>
      _kSecUseAuthenticationUIFail.value;

  set kSecUseAuthenticationUIFail(CFStringRef value) =>
      _kSecUseAuthenticationUIFail.value = value;

  late final ffi.Pointer<CFStringRef> _kSecUseAuthenticationUISkip =
      _lookup<CFStringRef>('kSecUseAuthenticationUISkip');

  CFStringRef get kSecUseAuthenticationUISkip =>
      _kSecUseAuthenticationUISkip.value;

  set kSecUseAuthenticationUISkip(CFStringRef value) =>
      _kSecUseAuthenticationUISkip.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrTokenIDSecureEnclave =
      _lookup<CFStringRef>('kSecAttrTokenIDSecureEnclave');

  CFStringRef get kSecAttrTokenIDSecureEnclave =>
      _kSecAttrTokenIDSecureEnclave.value;

  set kSecAttrTokenIDSecureEnclave(CFStringRef value) =>
      _kSecAttrTokenIDSecureEnclave.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccessGroupToken =
      _lookup<CFStringRef>('kSecAttrAccessGroupToken');

  CFStringRef get kSecAttrAccessGroupToken => _kSecAttrAccessGroupToken.value;

  set kSecAttrAccessGroupToken(CFStringRef value) =>
      _kSecAttrAccessGroupToken.value = value;

  int SecItemCopyMatching(
    CFDictionaryRef query,
    ffi.Pointer<CFTypeRef> result,
  ) {
    return _SecItemCopyMatching(
      query,
      result,
    );
  }

  late final _SecItemCopyMatchingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CFDictionaryRef, ffi.Pointer<CFTypeRef>)>>('SecItemCopyMatching');
  late final _SecItemCopyMatching = _SecItemCopyMatchingPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<CFTypeRef>)>();

  int SecItemAdd(
    CFDictionaryRef attributes,
    ffi.Pointer<CFTypeRef> result,
  ) {
    return _SecItemAdd(
      attributes,
      result,
    );
  }

  late final _SecItemAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CFDictionaryRef, ffi.Pointer<CFTypeRef>)>>('SecItemAdd');
  late final _SecItemAdd = _SecItemAddPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<CFTypeRef>)>();

  int SecItemUpdate(
    CFDictionaryRef query,
    CFDictionaryRef attributesToUpdate,
  ) {
    return _SecItemUpdate(
      query,
      attributesToUpdate,
    );
  }

  late final _SecItemUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CFDictionaryRef, CFDictionaryRef)>>('SecItemUpdate');
  late final _SecItemUpdate = _SecItemUpdatePtr.asFunction<
      int Function(CFDictionaryRef, CFDictionaryRef)>();

  int SecItemDelete(
    CFDictionaryRef query,
  ) {
    return _SecItemDelete(
      query,
    );
  }

  late final _SecItemDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CFDictionaryRef)>>(
          'SecItemDelete');
  late final _SecItemDelete =
      _SecItemDeletePtr.asFunction<int Function(CFDictionaryRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedChar> pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  CFStringRef CFStringCreateWithCString(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              CFStringEncoding,
              ffi.UnsignedChar)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(ffi.Pointer<__CFAllocator>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Long)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedShort>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedChar> pStr,
    int encoding,
    ffi.Pointer<__CFAllocator> contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(
                  ffi.Pointer<__CFAllocator>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  CFStringEncoding,
                  ffi.Pointer<__CFAllocator>)>>(
      'CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<__CFAllocator>)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
    ffi.Pointer<__CFAllocator> contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Char>,
              CFStringEncoding,
              ffi.Pointer<__CFAllocator>)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<__CFAllocator>)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    ffi.Pointer<__CFAllocator> contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              CFStringEncoding,
              ffi.UnsignedChar,
              ffi.Pointer<__CFAllocator>)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              int,
              int,
              ffi.Pointer<__CFAllocator>)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int numChars,
    ffi.Pointer<__CFAllocator> contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(
                  ffi.Pointer<__CFAllocator>,
                  ffi.Pointer<ffi.UnsignedShort>,
                  ffi.Long,
                  ffi.Pointer<__CFAllocator>)>>(
      'CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedShort>,
              int,
              ffi.Pointer<__CFAllocator>)>();

  CFStringRef CFStringCreateWithSubstring(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring =
      _CFStringCreateWithSubstringPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(ffi.Pointer<__CFAllocator>, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    ffi.Pointer<__CFAllocator> alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    ffi.Pointer<__CFAllocator> alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    ffi.Pointer<ffi.Char> arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              CFDictionaryRef,
              CFStringRef,
              ffi.Pointer<ffi.Char>)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDictionaryRef,
              CFStringRef, ffi.Pointer<ffi.Char>)>();

  CFStringRef CFStringCreateStringWithValidatedFormat(
    ffi.Pointer<__CFAllocator> alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    ffi.Pointer<ffi.Pointer<__CFError>> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormat(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(
                  ffi.Pointer<__CFAllocator>,
                  CFDictionaryRef,
                  CFStringRef,
                  CFStringRef,
                  ffi.Pointer<ffi.Pointer<__CFError>>)>>(
      'CFStringCreateStringWithValidatedFormat');
  late final _CFStringCreateStringWithValidatedFormat =
      _CFStringCreateStringWithValidatedFormatPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDictionaryRef,
              CFStringRef, CFStringRef, ffi.Pointer<ffi.Pointer<__CFError>>)>();

  CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(
    ffi.Pointer<__CFAllocator> alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    ffi.Pointer<ffi.Char> arguments,
    ffi.Pointer<ffi.Pointer<__CFError>> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormatAndArguments(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      arguments,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatAndArgumentsPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(
                  ffi.Pointer<__CFAllocator>,
                  CFDictionaryRef,
                  CFStringRef,
                  CFStringRef,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<__CFError>>)>>(
      'CFStringCreateStringWithValidatedFormatAndArguments');
  late final _CFStringCreateStringWithValidatedFormatAndArguments =
      _CFStringCreateStringWithValidatedFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              CFDictionaryRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<__CFError>>)>();

  ffi.Pointer<__CFString> CFStringCreateMutable(
    ffi.Pointer<__CFAllocator> alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFString> Function(
              ffi.Pointer<__CFAllocator>, ffi.Long)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      ffi.Pointer<__CFString> Function(ffi.Pointer<__CFAllocator>, int)>();

  ffi.Pointer<__CFString> CFStringCreateMutableCopy(
    ffi.Pointer<__CFAllocator> alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFString> Function(ffi.Pointer<__CFAllocator>, ffi.Long,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          ffi.Pointer<__CFString> Function(
              ffi.Pointer<__CFAllocator>, int, CFStringRef)>();

  ffi.Pointer<__CFString> CFStringCreateMutableWithExternalCharactersNoCopy(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int numChars,
    int capacity,
    ffi.Pointer<__CFAllocator> externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<__CFString> Function(
                  ffi.Pointer<__CFAllocator>,
                  ffi.Pointer<ffi.UnsignedShort>,
                  ffi.Long,
                  ffi.Long,
                  ffi.Pointer<__CFAllocator>)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          ffi.Pointer<__CFString> Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedShort>,
              int,
              int,
              ffi.Pointer<__CFAllocator>)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedShort Function(CFStringRef, ffi.Long)>>(
      'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<ffi.UnsignedShort> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<ffi.UnsignedShort>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<ffi.UnsignedShort>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(CFStringRef, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(CFStringRef, ffi.Pointer<ffi.Char>,
              ffi.Long, CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.UnsignedChar> CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ffi.Pointer<ffi.UnsignedChar> Function(CFStringRef, int)>();

  ffi.Pointer<ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<ffi.UnsignedShort> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              CFStringRef)>>('CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<ffi.UnsignedShort> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int maxBufLen,
    ffi.Pointer<ffi.Long> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              ffi.UnsignedChar,
              ffi.UnsignedChar,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<ffi.Long>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Long>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    ffi.Pointer<__CFAllocator> alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              ffi.Pointer<__CFAllocator>,
              CFStringRef,
              CFStringEncoding,
              ffi.UnsignedChar)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(
              ffi.Pointer<__CFAllocator>, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Long, CFStringEncoding)>>(
      'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(CFStringRef, ffi.Pointer<ffi.Char>,
              ffi.Long)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(
                  ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Char>)>();

  CFComparisonResult CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
      locale,
    ));
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(CFStringRef, CFStringRef, CFRange, ffi.UnsignedLong,
              ffi.Pointer<__CFLocale>)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int,
              ffi.Pointer<__CFLocale>)>();

  CFComparisonResult CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
    ));
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(CFStringRef, CFStringRef, CFRange,
              ffi.UnsignedLong)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  CFComparisonResult CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompare(
      theString1,
      theString2,
      compareOptions.value,
    ));
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              CFStringRef, CFStringRef, ffi.UnsignedLong)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<__CFLocale> locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.UnsignedLong,
              ffi.Pointer<__CFLocale>,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int,
              ffi.Pointer<__CFLocale>, ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.UnsignedLong,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  ffi.Pointer<__CFArray> CFStringCreateArrayWithFindResults(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFArray> Function(
              ffi.Pointer<__CFAllocator>,
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.UnsignedLong)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          ffi.Pointer<__CFArray> Function(ffi.Pointer<__CFAllocator>,
              CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions.value,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, ffi.UnsignedLong)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedChar Function(CFStringRef, CFStringRef)>>(
      'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedChar Function(CFStringRef, CFStringRef)>>(
      'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, ffi.Long)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet(
    CFStringRef theString,
    ffi.Pointer<__CFCharacterSet> theSet,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              CFStringRef,
              ffi.Pointer<__CFCharacterSet>,
              CFRange,
              ffi.UnsignedLong,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<__CFCharacterSet>, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<ffi.Long> lineBeginIndex,
    ffi.Pointer<ffi.Long> lineEndIndex,
    ffi.Pointer<ffi.Long> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<ffi.Long> parBeginIndex,
    ffi.Pointer<ffi.Long> parEndIndex,
    ffi.Pointer<ffi.Long> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    ffi.Pointer<__CFLocale> locale,
    ffi.Pointer<ffi.UnsignedInt> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Long Function(
                  CFStringRef,
                  ffi.Long,
                  CFRange,
                  ffi.UnsignedLong,
                  ffi.Pointer<__CFLocale>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, ffi.Pointer<__CFLocale>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int CFStringIsHyphenationAvailableForLocale(
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedChar Function(ffi.Pointer<__CFLocale>)>>(
      'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(ffi.Pointer<__CFLocale>)>();

  CFStringRef CFStringCreateByCombiningStrings(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<__CFArray> theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<__CFArray>,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<__CFArray>, CFStringRef)>();

  ffi.Pointer<__CFArray> CFStringCreateArrayBySeparatingStrings(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFArray> Function(
              ffi.Pointer<__CFAllocator>,
              CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          ffi.Pointer<__CFArray> Function(
              ffi.Pointer<__CFAllocator>, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    ffi.Pointer<__CFString> theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFStringRef)>();

  void CFStringAppendCharacters(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Long)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(
              ffi.Pointer<__CFString>, ffi.Pointer<ffi.UnsignedShort>, int)>();

  void CFStringAppendPascalString(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<ffi.UnsignedChar> pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>,
              ffi.Pointer<ffi.UnsignedChar>,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString =
      _CFStringAppendPascalStringPtr.asFunction<
          void Function(
              ffi.Pointer<__CFString>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void CFStringAppendCString(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, ffi.Pointer<ffi.Char>, int)>();

  void CFStringAppendFormat(
    ffi.Pointer<__CFString> theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    ffi.Pointer<__CFString> theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    ffi.Pointer<ffi.Char> arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>,
              CFDictionaryRef,
              CFStringRef,
              ffi.Pointer<ffi.Char>)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(ffi.Pointer<__CFString>, CFDictionaryRef, CFStringRef,
              ffi.Pointer<ffi.Char>)>();

  void CFStringInsert(
    ffi.Pointer<__CFString> str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, ffi.Long,
              CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, int, CFStringRef)>();

  void CFStringDelete(
    ffi.Pointer<__CFString> theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<__CFString>, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFRange)>();

  void CFStringReplace(
    ffi.Pointer<__CFString> theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, CFRange,
              CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    ffi.Pointer<__CFString> theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFStringRef)>();

  int CFStringFindAndReplace(
    ffi.Pointer<__CFString> theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<__CFString>, CFStringRef, CFStringRef,
              CFRange, ffi.UnsignedLong)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          ffi.Pointer<__CFString>, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Long,
              ffi.Long)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(ffi.Pointer<__CFString>, ffi.Pointer<ffi.UnsignedShort>,
              int, int)>();

  void CFStringPad(
    ffi.Pointer<__CFString> theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, CFStringRef, ffi.Long,
              ffi.Long)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFStringRef, int, int)>();

  void CFStringTrim(
    ffi.Pointer<__CFString> theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, CFStringRef)>();

  void CFStringTrimWhitespace(
    ffi.Pointer<__CFString> theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<__CFString>)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(ffi.Pointer<__CFString>)>();

  void CFStringLowercase(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>,
              ffi.Pointer<__CFLocale>)>>('CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, ffi.Pointer<__CFLocale>)>();

  void CFStringUppercase(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>,
              ffi.Pointer<__CFLocale>)>>('CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, ffi.Pointer<__CFLocale>)>();

  void CFStringCapitalize(
    ffi.Pointer<__CFString> theString,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>,
              ffi.Pointer<__CFLocale>)>>('CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, ffi.Pointer<__CFLocale>)>();

  void CFStringNormalize(
    ffi.Pointer<__CFString> theString,
    CFStringNormalizationForm theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm.value,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFString>, ffi.UnsignedLong)>>('CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(ffi.Pointer<__CFString>, int)>();

  void CFStringFold(
    ffi.Pointer<__CFString> theString,
    CFStringCompareFlags theFlags,
    ffi.Pointer<__CFLocale> theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags.value,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFString>, ffi.UnsignedLong,
              ffi.Pointer<__CFLocale>)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(ffi.Pointer<__CFString>, int, ffi.Pointer<__CFLocale>)>();

  int CFStringTransform(
    ffi.Pointer<__CFString> string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<__CFString>,
              ffi.Pointer<CFRange>,
              CFStringRef,
              ffi.UnsignedChar)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          ffi.Pointer<__CFString>, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedChar Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(ffi.UnsignedLong)>>(
          'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(ffi.UnsignedInt)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    ffi.Pointer<__CFAllocator> allocator,
    CFStringRef tmplate,
    int options,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(ffi.Pointer<__CFAllocator>, CFStringRef,
                  ffi.UnsignedLong, ffi.Pointer<__CFLocale>)>>(
      'CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFStringRef, int,
              ffi.Pointer<__CFLocale>)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    ffi.Pointer<__CFAllocator> allocator,
    CFISO8601DateFormatOptions formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions.value,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(ffi.Pointer<__CFAllocator>,
              ffi.UnsignedLong)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(ffi.Pointer<__CFAllocator>, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<__CFLocale> locale,
    CFDateFormatterStyle dateStyle,
    CFDateFormatterStyle timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle.value,
      timeStyle.value,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<__CFLocale>,
              ffi.UnsignedLong,
              ffi.UnsignedLong)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(
          ffi.Pointer<__CFAllocator>, ffi.Pointer<__CFLocale>, int, int)>();

  ffi.Pointer<__CFLocale> CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__CFLocale> Function(
              CFDateFormatterRef)>>('CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<ffi.Pointer<__CFLocale> Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetDateStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetDateStylePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(CFDateFormatterRef)>>(
      'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetTimeStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetTimeStylePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(CFDateFormatterRef)>>(
      'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFDateFormatterRef, CFStringRef)>>(
      'CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    ffi.Pointer<__CFAllocator> allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    ffi.Pointer<__CFAllocator> allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(ffi.Pointer<__CFAllocator>, CFDateFormatterRef,
              ffi.Double)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(
              ffi.Pointer<__CFAllocator>, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    ffi.Pointer<__CFAllocator> allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(
              ffi.Pointer<__CFAllocator>,
              CFDateFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(ffi.Pointer<__CFAllocator>, CFDateFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<ffi.Double> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedChar Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<ffi.Double>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<ffi.Double>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    ffi.Pointer<__CFAllocator> alloc,
    CFStringRef string,
    CFRange range,
    int options,
    ffi.Pointer<__CFLocale> locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(
              ffi.Pointer<__CFAllocator>,
              CFStringRef,
              CFRange,
              ffi.UnsignedLong,
              ffi.Pointer<__CFLocale>)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(ffi.Pointer<__CFAllocator>, CFStringRef,
          CFRange, int, ffi.Pointer<__CFLocale>)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    ));
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(CFStringTokenizerRef,
              ffi.Long)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    ));
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(CFStringTokenizerRef)>>(
      'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              ffi.UnsignedLong)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    ffi.Pointer<__CFArray> derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              CFStringTokenizerRef,
              ffi.Pointer<CFRange>,
              ffi.Long,
              ffi.Pointer<__CFArray>)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              ffi.Pointer<__CFArray>)>();

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationAny =
      _lookup<CFStringRef>('kSecACLAuthorizationAny');

  CFStringRef get kSecACLAuthorizationAny => _kSecACLAuthorizationAny.value;

  set kSecACLAuthorizationAny(CFStringRef value) =>
      _kSecACLAuthorizationAny.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationLogin =
      _lookup<CFStringRef>('kSecACLAuthorizationLogin');

  CFStringRef get kSecACLAuthorizationLogin => _kSecACLAuthorizationLogin.value;

  set kSecACLAuthorizationLogin(CFStringRef value) =>
      _kSecACLAuthorizationLogin.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationGenKey =
      _lookup<CFStringRef>('kSecACLAuthorizationGenKey');

  CFStringRef get kSecACLAuthorizationGenKey =>
      _kSecACLAuthorizationGenKey.value;

  set kSecACLAuthorizationGenKey(CFStringRef value) =>
      _kSecACLAuthorizationGenKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationDelete =
      _lookup<CFStringRef>('kSecACLAuthorizationDelete');

  CFStringRef get kSecACLAuthorizationDelete =>
      _kSecACLAuthorizationDelete.value;

  set kSecACLAuthorizationDelete(CFStringRef value) =>
      _kSecACLAuthorizationDelete.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationExportWrapped =
      _lookup<CFStringRef>('kSecACLAuthorizationExportWrapped');

  CFStringRef get kSecACLAuthorizationExportWrapped =>
      _kSecACLAuthorizationExportWrapped.value;

  set kSecACLAuthorizationExportWrapped(CFStringRef value) =>
      _kSecACLAuthorizationExportWrapped.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationExportClear =
      _lookup<CFStringRef>('kSecACLAuthorizationExportClear');

  CFStringRef get kSecACLAuthorizationExportClear =>
      _kSecACLAuthorizationExportClear.value;

  set kSecACLAuthorizationExportClear(CFStringRef value) =>
      _kSecACLAuthorizationExportClear.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationImportWrapped =
      _lookup<CFStringRef>('kSecACLAuthorizationImportWrapped');

  CFStringRef get kSecACLAuthorizationImportWrapped =>
      _kSecACLAuthorizationImportWrapped.value;

  set kSecACLAuthorizationImportWrapped(CFStringRef value) =>
      _kSecACLAuthorizationImportWrapped.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationImportClear =
      _lookup<CFStringRef>('kSecACLAuthorizationImportClear');

  CFStringRef get kSecACLAuthorizationImportClear =>
      _kSecACLAuthorizationImportClear.value;

  set kSecACLAuthorizationImportClear(CFStringRef value) =>
      _kSecACLAuthorizationImportClear.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationSign =
      _lookup<CFStringRef>('kSecACLAuthorizationSign');

  CFStringRef get kSecACLAuthorizationSign => _kSecACLAuthorizationSign.value;

  set kSecACLAuthorizationSign(CFStringRef value) =>
      _kSecACLAuthorizationSign.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationEncrypt =
      _lookup<CFStringRef>('kSecACLAuthorizationEncrypt');

  CFStringRef get kSecACLAuthorizationEncrypt =>
      _kSecACLAuthorizationEncrypt.value;

  set kSecACLAuthorizationEncrypt(CFStringRef value) =>
      _kSecACLAuthorizationEncrypt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationDecrypt =
      _lookup<CFStringRef>('kSecACLAuthorizationDecrypt');

  CFStringRef get kSecACLAuthorizationDecrypt =>
      _kSecACLAuthorizationDecrypt.value;

  set kSecACLAuthorizationDecrypt(CFStringRef value) =>
      _kSecACLAuthorizationDecrypt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationMAC =
      _lookup<CFStringRef>('kSecACLAuthorizationMAC');

  CFStringRef get kSecACLAuthorizationMAC => _kSecACLAuthorizationMAC.value;

  set kSecACLAuthorizationMAC(CFStringRef value) =>
      _kSecACLAuthorizationMAC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationDerive =
      _lookup<CFStringRef>('kSecACLAuthorizationDerive');

  CFStringRef get kSecACLAuthorizationDerive =>
      _kSecACLAuthorizationDerive.value;

  set kSecACLAuthorizationDerive(CFStringRef value) =>
      _kSecACLAuthorizationDerive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainCreate =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainCreate');

  CFStringRef get kSecACLAuthorizationKeychainCreate =>
      _kSecACLAuthorizationKeychainCreate.value;

  set kSecACLAuthorizationKeychainCreate(CFStringRef value) =>
      _kSecACLAuthorizationKeychainCreate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainDelete =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainDelete');

  CFStringRef get kSecACLAuthorizationKeychainDelete =>
      _kSecACLAuthorizationKeychainDelete.value;

  set kSecACLAuthorizationKeychainDelete(CFStringRef value) =>
      _kSecACLAuthorizationKeychainDelete.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainItemRead =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainItemRead');

  CFStringRef get kSecACLAuthorizationKeychainItemRead =>
      _kSecACLAuthorizationKeychainItemRead.value;

  set kSecACLAuthorizationKeychainItemRead(CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemRead.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainItemInsert =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainItemInsert');

  CFStringRef get kSecACLAuthorizationKeychainItemInsert =>
      _kSecACLAuthorizationKeychainItemInsert.value;

  set kSecACLAuthorizationKeychainItemInsert(CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemInsert.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainItemModify =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainItemModify');

  CFStringRef get kSecACLAuthorizationKeychainItemModify =>
      _kSecACLAuthorizationKeychainItemModify.value;

  set kSecACLAuthorizationKeychainItemModify(CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemModify.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationKeychainItemDelete =
      _lookup<CFStringRef>('kSecACLAuthorizationKeychainItemDelete');

  CFStringRef get kSecACLAuthorizationKeychainItemDelete =>
      _kSecACLAuthorizationKeychainItemDelete.value;

  set kSecACLAuthorizationKeychainItemDelete(CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemDelete.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationChangeACL =
      _lookup<CFStringRef>('kSecACLAuthorizationChangeACL');

  CFStringRef get kSecACLAuthorizationChangeACL =>
      _kSecACLAuthorizationChangeACL.value;

  set kSecACLAuthorizationChangeACL(CFStringRef value) =>
      _kSecACLAuthorizationChangeACL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationChangeOwner =
      _lookup<CFStringRef>('kSecACLAuthorizationChangeOwner');

  CFStringRef get kSecACLAuthorizationChangeOwner =>
      _kSecACLAuthorizationChangeOwner.value;

  set kSecACLAuthorizationChangeOwner(CFStringRef value) =>
      _kSecACLAuthorizationChangeOwner.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationPartitionID =
      _lookup<CFStringRef>('kSecACLAuthorizationPartitionID');

  CFStringRef get kSecACLAuthorizationPartitionID =>
      _kSecACLAuthorizationPartitionID.value;

  set kSecACLAuthorizationPartitionID(CFStringRef value) =>
      _kSecACLAuthorizationPartitionID.value = value;

  late final ffi.Pointer<CFStringRef> _kSecACLAuthorizationIntegrity =
      _lookup<CFStringRef>('kSecACLAuthorizationIntegrity');

  CFStringRef get kSecACLAuthorizationIntegrity =>
      _kSecACLAuthorizationIntegrity.value;

  set kSecACLAuthorizationIntegrity(CFStringRef value) =>
      _kSecACLAuthorizationIntegrity.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPrivateKeyAttrs =
      _lookup<CFStringRef>('kSecPrivateKeyAttrs');

  CFStringRef get kSecPrivateKeyAttrs => _kSecPrivateKeyAttrs.value;

  set kSecPrivateKeyAttrs(CFStringRef value) =>
      _kSecPrivateKeyAttrs.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPublicKeyAttrs =
      _lookup<CFStringRef>('kSecPublicKeyAttrs');

  CFStringRef get kSecPublicKeyAttrs => _kSecPublicKeyAttrs.value;

  set kSecPublicKeyAttrs(CFStringRef value) =>
      _kSecPublicKeyAttrs.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSASignatureRaw =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureRaw');

  CFStringRef get kSecKeyAlgorithmRSASignatureRaw =>
      _kSecKeyAlgorithmRSASignatureRaw.value;

  set kSecKeyAlgorithmRSASignatureRaw(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureRaw.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPSSSHA1');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPSSSHA1 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA1(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPSSSHA224');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPSSSHA224 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA224(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPSSSHA256');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPSSSHA256 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA256(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPSSSHA384');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPSSSHA384 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA384(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureDigestPSSSHA512');

  CFStringRef get kSecKeyAlgorithmRSASignatureDigestPSSSHA512 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA512(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePSSSHA1');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePSSSHA1 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA1(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePSSSHA224');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePSSSHA224 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA224(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePSSSHA256');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePSSSHA256 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA256(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePSSSHA384');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePSSSHA384 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA384(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSASignatureMessagePSSSHA512');

  CFStringRef get kSecKeyAlgorithmRSASignatureMessagePSSSHA512 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA512(CFStringRef value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962SHA1');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962SHA1 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962SHA224');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962SHA224 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962SHA256');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962SHA256 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962SHA384');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962SHA384 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestX962SHA512');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestX962SHA512 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageX962SHA1');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageX962SHA1 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageX962SHA224');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageX962SHA224 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageX962SHA256');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageX962SHA256 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageX962SHA384');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageX962SHA384 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageX962SHA512');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageX962SHA512 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512');

  CFStringRef get kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512 =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512.value;

  set kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureDigestRFC4754SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1 =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1.value;

  set kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224 =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224 =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224.value;

  set kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256 =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256 =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256.value;

  set kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384 =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384 =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384.value;

  set kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512 =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512');

  CFStringRef get kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512 =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512.value;

  set kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureMessageRFC4754SHA512.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmECDSASignatureRFC4754 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDSASignatureRFC4754');

  CFStringRef get kSecKeyAlgorithmECDSASignatureRFC4754 =>
      _kSecKeyAlgorithmECDSASignatureRFC4754.value;

  set kSecKeyAlgorithmECDSASignatureRFC4754(CFStringRef value) =>
      _kSecKeyAlgorithmECDSASignatureRFC4754.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionRaw =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionRaw');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionRaw =>
      _kSecKeyAlgorithmRSAEncryptionRaw.value;

  set kSecKeyAlgorithmRSAEncryptionRaw(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionRaw.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionPKCS1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionPKCS1');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionPKCS1 =>
      _kSecKeyAlgorithmRSAEncryptionPKCS1.value;

  set kSecKeyAlgorithmRSAEncryptionPKCS1(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionPKCS1.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionOAEPSHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA1');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA1 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA1(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionOAEPSHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA224');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA224 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA224(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionOAEPSHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA256');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA256 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA256(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionOAEPSHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA384');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA384 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA384(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmRSAEncryptionOAEPSHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA512');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA512 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA512(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM =
      _lookup<CFStringRef>('kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM');

  CFStringRef get kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM(CFStringRef value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM');

  CFStringRef get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM =
      _lookup<CFStringRef>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM');

  CFStringRef
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM(
          CFStringRef value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM.value =
          value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmECDHKeyExchangeStandard =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandard');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandard =>
      _kSecKeyAlgorithmECDHKeyExchangeStandard.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandard(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandard.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAlgorithmECDHKeyExchangeCofactor =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactor');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactor =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactor.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactor(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactor.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 =
      _lookup<CFStringRef>('kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512');

  CFStringRef get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512(CFStringRef value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecKeyKeyExchangeParameterRequestedSize =
      _lookup<CFStringRef>('kSecKeyKeyExchangeParameterRequestedSize');

  CFStringRef get kSecKeyKeyExchangeParameterRequestedSize =>
      _kSecKeyKeyExchangeParameterRequestedSize.value;

  set kSecKeyKeyExchangeParameterRequestedSize(CFStringRef value) =>
      _kSecKeyKeyExchangeParameterRequestedSize.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyKeyExchangeParameterSharedInfo =
      _lookup<CFStringRef>('kSecKeyKeyExchangeParameterSharedInfo');

  CFStringRef get kSecKeyKeyExchangeParameterSharedInfo =>
      _kSecKeyKeyExchangeParameterSharedInfo.value;

  set kSecKeyKeyExchangeParameterSharedInfo(CFStringRef value) =>
      _kSecKeyKeyExchangeParameterSharedInfo.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleX509Basic =
      _lookup<CFStringRef>('kSecPolicyAppleX509Basic');

  CFStringRef get kSecPolicyAppleX509Basic => _kSecPolicyAppleX509Basic.value;

  set kSecPolicyAppleX509Basic(CFStringRef value) =>
      _kSecPolicyAppleX509Basic.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleSSL =
      _lookup<CFStringRef>('kSecPolicyAppleSSL');

  CFStringRef get kSecPolicyAppleSSL => _kSecPolicyAppleSSL.value;

  set kSecPolicyAppleSSL(CFStringRef value) =>
      _kSecPolicyAppleSSL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleSMIME =
      _lookup<CFStringRef>('kSecPolicyAppleSMIME');

  CFStringRef get kSecPolicyAppleSMIME => _kSecPolicyAppleSMIME.value;

  set kSecPolicyAppleSMIME(CFStringRef value) =>
      _kSecPolicyAppleSMIME.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleEAP =
      _lookup<CFStringRef>('kSecPolicyAppleEAP');

  CFStringRef get kSecPolicyAppleEAP => _kSecPolicyAppleEAP.value;

  set kSecPolicyAppleEAP(CFStringRef value) =>
      _kSecPolicyAppleEAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleIPsec =
      _lookup<CFStringRef>('kSecPolicyAppleIPsec');

  CFStringRef get kSecPolicyAppleIPsec => _kSecPolicyAppleIPsec.value;

  set kSecPolicyAppleIPsec(CFStringRef value) =>
      _kSecPolicyAppleIPsec.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleiChat =
      _lookup<CFStringRef>('kSecPolicyAppleiChat');

  CFStringRef get kSecPolicyAppleiChat => _kSecPolicyAppleiChat.value;

  set kSecPolicyAppleiChat(CFStringRef value) =>
      _kSecPolicyAppleiChat.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyApplePKINITClient =
      _lookup<CFStringRef>('kSecPolicyApplePKINITClient');

  CFStringRef get kSecPolicyApplePKINITClient =>
      _kSecPolicyApplePKINITClient.value;

  set kSecPolicyApplePKINITClient(CFStringRef value) =>
      _kSecPolicyApplePKINITClient.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyApplePKINITServer =
      _lookup<CFStringRef>('kSecPolicyApplePKINITServer');

  CFStringRef get kSecPolicyApplePKINITServer =>
      _kSecPolicyApplePKINITServer.value;

  set kSecPolicyApplePKINITServer(CFStringRef value) =>
      _kSecPolicyApplePKINITServer.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleCodeSigning =
      _lookup<CFStringRef>('kSecPolicyAppleCodeSigning');

  CFStringRef get kSecPolicyAppleCodeSigning =>
      _kSecPolicyAppleCodeSigning.value;

  set kSecPolicyAppleCodeSigning(CFStringRef value) =>
      _kSecPolicyAppleCodeSigning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyMacAppStoreReceipt =
      _lookup<CFStringRef>('kSecPolicyMacAppStoreReceipt');

  CFStringRef get kSecPolicyMacAppStoreReceipt =>
      _kSecPolicyMacAppStoreReceipt.value;

  set kSecPolicyMacAppStoreReceipt(CFStringRef value) =>
      _kSecPolicyMacAppStoreReceipt.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleIDValidation =
      _lookup<CFStringRef>('kSecPolicyAppleIDValidation');

  CFStringRef get kSecPolicyAppleIDValidation =>
      _kSecPolicyAppleIDValidation.value;

  set kSecPolicyAppleIDValidation(CFStringRef value) =>
      _kSecPolicyAppleIDValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleTimeStamping =
      _lookup<CFStringRef>('kSecPolicyAppleTimeStamping');

  CFStringRef get kSecPolicyAppleTimeStamping =>
      _kSecPolicyAppleTimeStamping.value;

  set kSecPolicyAppleTimeStamping(CFStringRef value) =>
      _kSecPolicyAppleTimeStamping.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyAppleRevocation =
      _lookup<CFStringRef>('kSecPolicyAppleRevocation');

  CFStringRef get kSecPolicyAppleRevocation => _kSecPolicyAppleRevocation.value;

  set kSecPolicyAppleRevocation(CFStringRef value) =>
      _kSecPolicyAppleRevocation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyApplePassbookSigning =
      _lookup<CFStringRef>('kSecPolicyApplePassbookSigning');

  CFStringRef get kSecPolicyApplePassbookSigning =>
      _kSecPolicyApplePassbookSigning.value;

  set kSecPolicyApplePassbookSigning(CFStringRef value) =>
      _kSecPolicyApplePassbookSigning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyApplePayIssuerEncryption =
      _lookup<CFStringRef>('kSecPolicyApplePayIssuerEncryption');

  CFStringRef get kSecPolicyApplePayIssuerEncryption =>
      _kSecPolicyApplePayIssuerEncryption.value;

  set kSecPolicyApplePayIssuerEncryption(CFStringRef value) =>
      _kSecPolicyApplePayIssuerEncryption.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyOid =
      _lookup<CFStringRef>('kSecPolicyOid');

  CFStringRef get kSecPolicyOid => _kSecPolicyOid.value;

  set kSecPolicyOid(CFStringRef value) => _kSecPolicyOid.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyName =
      _lookup<CFStringRef>('kSecPolicyName');

  CFStringRef get kSecPolicyName => _kSecPolicyName.value;

  set kSecPolicyName(CFStringRef value) => _kSecPolicyName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyClient =
      _lookup<CFStringRef>('kSecPolicyClient');

  CFStringRef get kSecPolicyClient => _kSecPolicyClient.value;

  set kSecPolicyClient(CFStringRef value) => _kSecPolicyClient.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyRevocationFlags =
      _lookup<CFStringRef>('kSecPolicyRevocationFlags');

  CFStringRef get kSecPolicyRevocationFlags => _kSecPolicyRevocationFlags.value;

  set kSecPolicyRevocationFlags(CFStringRef value) =>
      _kSecPolicyRevocationFlags.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyTeamIdentifier =
      _lookup<CFStringRef>('kSecPolicyTeamIdentifier');

  CFStringRef get kSecPolicyTeamIdentifier => _kSecPolicyTeamIdentifier.value;

  set kSecPolicyTeamIdentifier(CFStringRef value) =>
      _kSecPolicyTeamIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_DigitalSignature =
      _lookup<CFStringRef>('kSecPolicyKU_DigitalSignature');

  CFStringRef get kSecPolicyKU_DigitalSignature =>
      _kSecPolicyKU_DigitalSignature.value;

  set kSecPolicyKU_DigitalSignature(CFStringRef value) =>
      _kSecPolicyKU_DigitalSignature.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_NonRepudiation =
      _lookup<CFStringRef>('kSecPolicyKU_NonRepudiation');

  CFStringRef get kSecPolicyKU_NonRepudiation =>
      _kSecPolicyKU_NonRepudiation.value;

  set kSecPolicyKU_NonRepudiation(CFStringRef value) =>
      _kSecPolicyKU_NonRepudiation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_KeyEncipherment =
      _lookup<CFStringRef>('kSecPolicyKU_KeyEncipherment');

  CFStringRef get kSecPolicyKU_KeyEncipherment =>
      _kSecPolicyKU_KeyEncipherment.value;

  set kSecPolicyKU_KeyEncipherment(CFStringRef value) =>
      _kSecPolicyKU_KeyEncipherment.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_DataEncipherment =
      _lookup<CFStringRef>('kSecPolicyKU_DataEncipherment');

  CFStringRef get kSecPolicyKU_DataEncipherment =>
      _kSecPolicyKU_DataEncipherment.value;

  set kSecPolicyKU_DataEncipherment(CFStringRef value) =>
      _kSecPolicyKU_DataEncipherment.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_KeyAgreement =
      _lookup<CFStringRef>('kSecPolicyKU_KeyAgreement');

  CFStringRef get kSecPolicyKU_KeyAgreement => _kSecPolicyKU_KeyAgreement.value;

  set kSecPolicyKU_KeyAgreement(CFStringRef value) =>
      _kSecPolicyKU_KeyAgreement.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_KeyCertSign =
      _lookup<CFStringRef>('kSecPolicyKU_KeyCertSign');

  CFStringRef get kSecPolicyKU_KeyCertSign => _kSecPolicyKU_KeyCertSign.value;

  set kSecPolicyKU_KeyCertSign(CFStringRef value) =>
      _kSecPolicyKU_KeyCertSign.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_CRLSign =
      _lookup<CFStringRef>('kSecPolicyKU_CRLSign');

  CFStringRef get kSecPolicyKU_CRLSign => _kSecPolicyKU_CRLSign.value;

  set kSecPolicyKU_CRLSign(CFStringRef value) =>
      _kSecPolicyKU_CRLSign.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_EncipherOnly =
      _lookup<CFStringRef>('kSecPolicyKU_EncipherOnly');

  CFStringRef get kSecPolicyKU_EncipherOnly => _kSecPolicyKU_EncipherOnly.value;

  set kSecPolicyKU_EncipherOnly(CFStringRef value) =>
      _kSecPolicyKU_EncipherOnly.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPolicyKU_DecipherOnly =
      _lookup<CFStringRef>('kSecPolicyKU_DecipherOnly');

  CFStringRef get kSecPolicyKU_DecipherOnly => _kSecPolicyKU_DecipherOnly.value;

  set kSecPolicyKU_DecipherOnly(CFStringRef value) =>
      _kSecPolicyKU_DecipherOnly.value = value;

  late final ffi.Pointer<ffi.Pointer<__SecRandom>> _kSecRandomDefault =
      _lookup<ffi.Pointer<__SecRandom>>('kSecRandomDefault');

  ffi.Pointer<__SecRandom> get kSecRandomDefault => _kSecRandomDefault.value;

  set kSecRandomDefault(ffi.Pointer<__SecRandom> value) =>
      _kSecRandomDefault.value = value;

  int SecItemExport(
    CFTypeRef secItemOrArray,
    SecExternalFormat outputFormat,
    SecItemImportExportFlags flags,
    ffi.Pointer<SecItemImportExportKeyParameters> keyParams,
    ffi.Pointer<CFDataRef> exportedData,
  ) {
    return _SecItemExport(
      secItemOrArray,
      outputFormat.value,
      flags.value,
      keyParams,
      exportedData,
    );
  }

  late final _SecItemExportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CFTypeRef,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<SecItemImportExportKeyParameters>,
              ffi.Pointer<CFDataRef>)>>('SecItemExport');
  late final _SecItemExport = _SecItemExportPtr.asFunction<
      int Function(
          CFTypeRef,
          int,
          int,
          ffi.Pointer<SecItemImportExportKeyParameters>,
          ffi.Pointer<CFDataRef>)>();

  int SecItemImport(
    CFDataRef importedData,
    CFStringRef fileNameOrExtension,
    ffi.Pointer<ffi.Uint32> inputFormat,
    ffi.Pointer<ffi.Uint32> itemType,
    SecItemImportExportFlags flags,
    ffi.Pointer<SecItemImportExportKeyParameters> keyParams,
    ffi.Pointer<__SecKeychain> importKeychain,
    ffi.Pointer<ffi.Pointer<__CFArray>> outItems,
  ) {
    return _SecItemImport(
      importedData,
      fileNameOrExtension,
      inputFormat,
      itemType,
      flags.value,
      keyParams,
      importKeychain,
      outItems,
    );
  }

  late final _SecItemImportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CFDataRef,
              CFStringRef,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32,
              ffi.Pointer<SecItemImportExportKeyParameters>,
              ffi.Pointer<__SecKeychain>,
              ffi.Pointer<ffi.Pointer<__CFArray>>)>>('SecItemImport');
  late final _SecItemImport = _SecItemImportPtr.asFunction<
      int Function(
          CFDataRef,
          CFStringRef,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          int,
          ffi.Pointer<SecItemImportExportKeyParameters>,
          ffi.Pointer<__SecKeychain>,
          ffi.Pointer<ffi.Pointer<__CFArray>>)>();

  late final ffi.Pointer<CFStringRef> _kSecImportExportPassphrase =
      _lookup<CFStringRef>('kSecImportExportPassphrase');

  CFStringRef get kSecImportExportPassphrase =>
      _kSecImportExportPassphrase.value;

  set kSecImportExportPassphrase(CFStringRef value) =>
      _kSecImportExportPassphrase.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportExportKeychain =
      _lookup<CFStringRef>('kSecImportExportKeychain');

  CFStringRef get kSecImportExportKeychain => _kSecImportExportKeychain.value;

  set kSecImportExportKeychain(CFStringRef value) =>
      _kSecImportExportKeychain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportExportAccess =
      _lookup<CFStringRef>('kSecImportExportAccess');

  CFStringRef get kSecImportExportAccess => _kSecImportExportAccess.value;

  set kSecImportExportAccess(CFStringRef value) =>
      _kSecImportExportAccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportToMemoryOnly =
      _lookup<CFStringRef>('kSecImportToMemoryOnly');

  CFStringRef get kSecImportToMemoryOnly => _kSecImportToMemoryOnly.value;

  set kSecImportToMemoryOnly(CFStringRef value) =>
      _kSecImportToMemoryOnly.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportItemLabel =
      _lookup<CFStringRef>('kSecImportItemLabel');

  CFStringRef get kSecImportItemLabel => _kSecImportItemLabel.value;

  set kSecImportItemLabel(CFStringRef value) =>
      _kSecImportItemLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportItemKeyID =
      _lookup<CFStringRef>('kSecImportItemKeyID');

  CFStringRef get kSecImportItemKeyID => _kSecImportItemKeyID.value;

  set kSecImportItemKeyID(CFStringRef value) =>
      _kSecImportItemKeyID.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportItemTrust =
      _lookup<CFStringRef>('kSecImportItemTrust');

  CFStringRef get kSecImportItemTrust => _kSecImportItemTrust.value;

  set kSecImportItemTrust(CFStringRef value) =>
      _kSecImportItemTrust.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportItemCertChain =
      _lookup<CFStringRef>('kSecImportItemCertChain');

  CFStringRef get kSecImportItemCertChain => _kSecImportItemCertChain.value;

  set kSecImportItemCertChain(CFStringRef value) =>
      _kSecImportItemCertChain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecImportItemIdentity =
      _lookup<CFStringRef>('kSecImportItemIdentity');

  CFStringRef get kSecImportItemIdentity => _kSecImportItemIdentity.value;

  set kSecImportItemIdentity(CFStringRef value) =>
      _kSecImportItemIdentity.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeTitle =
      _lookup<CFStringRef>('kSecPropertyTypeTitle');

  CFStringRef get kSecPropertyTypeTitle => _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeError =
      _lookup<CFStringRef>('kSecPropertyTypeError');

  CFStringRef get kSecPropertyTypeError => _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustEvaluationDate =
      _lookup<CFStringRef>('kSecTrustEvaluationDate');

  CFStringRef get kSecTrustEvaluationDate => _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustExtendedValidation =
      _lookup<CFStringRef>('kSecTrustExtendedValidation');

  CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustOrganizationName =
      _lookup<CFStringRef>('kSecTrustOrganizationName');

  CFStringRef get kSecTrustOrganizationName => _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustResultValue =
      _lookup<CFStringRef>('kSecTrustResultValue');

  CFStringRef get kSecTrustResultValue => _kSecTrustResultValue.value;

  set kSecTrustResultValue(CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationChecked =
      _lookup<CFStringRef>('kSecTrustRevocationChecked');

  CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationValidUntilDate =
      _lookup<CFStringRef>('kSecTrustRevocationValidUntilDate');

  CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustCertificateTransparency =
      _lookup<CFStringRef>('kSecTrustCertificateTransparency');

  CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<CFStringRef>('kSecTrustCertificateTransparencyWhiteList');

  CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  late final ffi.Pointer<CFStringRef> _kSecSharedPassword =
      _lookup<CFStringRef>('kSecSharedPassword');

  CFStringRef get kSecSharedPassword => _kSecSharedPassword.value;

  set kSecSharedPassword(CFStringRef value) =>
      _kSecSharedPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDADC_CERT_POLICY =
      _lookup<CFStringRef>('kSecOIDADC_CERT_POLICY');

  CFStringRef get kSecOIDADC_CERT_POLICY => _kSecOIDADC_CERT_POLICY.value;

  set kSecOIDADC_CERT_POLICY(CFStringRef value) =>
      _kSecOIDADC_CERT_POLICY.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_CERT_POLICY =
      _lookup<CFStringRef>('kSecOIDAPPLE_CERT_POLICY');

  CFStringRef get kSecOIDAPPLE_CERT_POLICY => _kSecOIDAPPLE_CERT_POLICY.value;

  set kSecOIDAPPLE_CERT_POLICY(CFStringRef value) =>
      _kSecOIDAPPLE_CERT_POLICY.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_CODE_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_CODE_SIGNING');

  CFStringRef get kSecOIDAPPLE_EKU_CODE_SIGNING =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING.value;

  set kSecOIDAPPLE_EKU_CODE_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_CODE_SIGNING_DEV');

  CFStringRef get kSecOIDAPPLE_EKU_CODE_SIGNING_DEV =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV.value;

  set kSecOIDAPPLE_EKU_CODE_SIGNING_DEV(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION');

  CFStringRef get kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION =>
      _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION.value;

  set kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_ICHAT_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_ICHAT_SIGNING');

  CFStringRef get kSecOIDAPPLE_EKU_ICHAT_SIGNING =>
      _kSecOIDAPPLE_EKU_ICHAT_SIGNING.value;

  set kSecOIDAPPLE_EKU_ICHAT_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_ICHAT_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_RESOURCE_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_RESOURCE_SIGNING');

  CFStringRef get kSecOIDAPPLE_EKU_RESOURCE_SIGNING =>
      _kSecOIDAPPLE_EKU_RESOURCE_SIGNING.value;

  set kSecOIDAPPLE_EKU_RESOURCE_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_RESOURCE_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY =
      _lookup<CFStringRef>('kSecOIDAPPLE_EKU_SYSTEM_IDENTITY');

  CFStringRef get kSecOIDAPPLE_EKU_SYSTEM_IDENTITY =>
      _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY.value;

  set kSecOIDAPPLE_EKU_SYSTEM_IDENTITY(CFStringRef value) =>
      _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EXTENSION =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION');

  CFStringRef get kSecOIDAPPLE_EXTENSION => _kSecOIDAPPLE_EXTENSION.value;

  set kSecOIDAPPLE_EXTENSION(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING');

  CFStringRef get kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING');

  CFStringRef get kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_APPLE_SIGNING');

  CFStringRef get kSecOIDAPPLE_EXTENSION_APPLE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_APPLE_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EXTENSION_CODE_SIGNING =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_CODE_SIGNING');

  CFStringRef get kSecOIDAPPLE_EXTENSION_CODE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_CODE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_CODE_SIGNING(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_CODE_SIGNING.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER');

  CFStringRef get kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER =>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER.value;

  set kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE');

  CFStringRef get kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE');

  CFStringRef get kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE');

  CFStringRef get kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE =
      _lookup<CFStringRef>('kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE');

  CFStringRef get kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE(CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAuthorityInfoAccess =
      _lookup<CFStringRef>('kSecOIDAuthorityInfoAccess');

  CFStringRef get kSecOIDAuthorityInfoAccess =>
      _kSecOIDAuthorityInfoAccess.value;

  set kSecOIDAuthorityInfoAccess(CFStringRef value) =>
      _kSecOIDAuthorityInfoAccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDAuthorityKeyIdentifier =
      _lookup<CFStringRef>('kSecOIDAuthorityKeyIdentifier');

  CFStringRef get kSecOIDAuthorityKeyIdentifier =>
      _kSecOIDAuthorityKeyIdentifier.value;

  set kSecOIDAuthorityKeyIdentifier(CFStringRef value) =>
      _kSecOIDAuthorityKeyIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDBasicConstraints =
      _lookup<CFStringRef>('kSecOIDBasicConstraints');

  CFStringRef get kSecOIDBasicConstraints => _kSecOIDBasicConstraints.value;

  set kSecOIDBasicConstraints(CFStringRef value) =>
      _kSecOIDBasicConstraints.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDBiometricInfo =
      _lookup<CFStringRef>('kSecOIDBiometricInfo');

  CFStringRef get kSecOIDBiometricInfo => _kSecOIDBiometricInfo.value;

  set kSecOIDBiometricInfo(CFStringRef value) =>
      _kSecOIDBiometricInfo.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCSSMKeyStruct =
      _lookup<CFStringRef>('kSecOIDCSSMKeyStruct');

  CFStringRef get kSecOIDCSSMKeyStruct => _kSecOIDCSSMKeyStruct.value;

  set kSecOIDCSSMKeyStruct(CFStringRef value) =>
      _kSecOIDCSSMKeyStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCertIssuer =
      _lookup<CFStringRef>('kSecOIDCertIssuer');

  CFStringRef get kSecOIDCertIssuer => _kSecOIDCertIssuer.value;

  set kSecOIDCertIssuer(CFStringRef value) => _kSecOIDCertIssuer.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCertificatePolicies =
      _lookup<CFStringRef>('kSecOIDCertificatePolicies');

  CFStringRef get kSecOIDCertificatePolicies =>
      _kSecOIDCertificatePolicies.value;

  set kSecOIDCertificatePolicies(CFStringRef value) =>
      _kSecOIDCertificatePolicies.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDClientAuth =
      _lookup<CFStringRef>('kSecOIDClientAuth');

  CFStringRef get kSecOIDClientAuth => _kSecOIDClientAuth.value;

  set kSecOIDClientAuth(CFStringRef value) => _kSecOIDClientAuth.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCollectiveStateProvinceName =
      _lookup<CFStringRef>('kSecOIDCollectiveStateProvinceName');

  CFStringRef get kSecOIDCollectiveStateProvinceName =>
      _kSecOIDCollectiveStateProvinceName.value;

  set kSecOIDCollectiveStateProvinceName(CFStringRef value) =>
      _kSecOIDCollectiveStateProvinceName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCollectiveStreetAddress =
      _lookup<CFStringRef>('kSecOIDCollectiveStreetAddress');

  CFStringRef get kSecOIDCollectiveStreetAddress =>
      _kSecOIDCollectiveStreetAddress.value;

  set kSecOIDCollectiveStreetAddress(CFStringRef value) =>
      _kSecOIDCollectiveStreetAddress.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCommonName =
      _lookup<CFStringRef>('kSecOIDCommonName');

  CFStringRef get kSecOIDCommonName => _kSecOIDCommonName.value;

  set kSecOIDCommonName(CFStringRef value) => _kSecOIDCommonName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCountryName =
      _lookup<CFStringRef>('kSecOIDCountryName');

  CFStringRef get kSecOIDCountryName => _kSecOIDCountryName.value;

  set kSecOIDCountryName(CFStringRef value) =>
      _kSecOIDCountryName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCrlDistributionPoints =
      _lookup<CFStringRef>('kSecOIDCrlDistributionPoints');

  CFStringRef get kSecOIDCrlDistributionPoints =>
      _kSecOIDCrlDistributionPoints.value;

  set kSecOIDCrlDistributionPoints(CFStringRef value) =>
      _kSecOIDCrlDistributionPoints.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCrlNumber =
      _lookup<CFStringRef>('kSecOIDCrlNumber');

  CFStringRef get kSecOIDCrlNumber => _kSecOIDCrlNumber.value;

  set kSecOIDCrlNumber(CFStringRef value) => _kSecOIDCrlNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDCrlReason =
      _lookup<CFStringRef>('kSecOIDCrlReason');

  CFStringRef get kSecOIDCrlReason => _kSecOIDCrlReason.value;

  set kSecOIDCrlReason(CFStringRef value) => _kSecOIDCrlReason.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT =
      _lookup<CFStringRef>('kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT');

  CFStringRef get kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT =>
      _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT.value;

  set kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT(CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDOTMAC_CERT_EMAIL_SIGN =
      _lookup<CFStringRef>('kSecOIDDOTMAC_CERT_EMAIL_SIGN');

  CFStringRef get kSecOIDDOTMAC_CERT_EMAIL_SIGN =>
      _kSecOIDDOTMAC_CERT_EMAIL_SIGN.value;

  set kSecOIDDOTMAC_CERT_EMAIL_SIGN(CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EMAIL_SIGN.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDOTMAC_CERT_EXTENSION =
      _lookup<CFStringRef>('kSecOIDDOTMAC_CERT_EXTENSION');

  CFStringRef get kSecOIDDOTMAC_CERT_EXTENSION =>
      _kSecOIDDOTMAC_CERT_EXTENSION.value;

  set kSecOIDDOTMAC_CERT_EXTENSION(CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EXTENSION.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDOTMAC_CERT_IDENTITY =
      _lookup<CFStringRef>('kSecOIDDOTMAC_CERT_IDENTITY');

  CFStringRef get kSecOIDDOTMAC_CERT_IDENTITY =>
      _kSecOIDDOTMAC_CERT_IDENTITY.value;

  set kSecOIDDOTMAC_CERT_IDENTITY(CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_IDENTITY.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDOTMAC_CERT_POLICY =
      _lookup<CFStringRef>('kSecOIDDOTMAC_CERT_POLICY');

  CFStringRef get kSecOIDDOTMAC_CERT_POLICY => _kSecOIDDOTMAC_CERT_POLICY.value;

  set kSecOIDDOTMAC_CERT_POLICY(CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_POLICY.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDeltaCrlIndicator =
      _lookup<CFStringRef>('kSecOIDDeltaCrlIndicator');

  CFStringRef get kSecOIDDeltaCrlIndicator => _kSecOIDDeltaCrlIndicator.value;

  set kSecOIDDeltaCrlIndicator(CFStringRef value) =>
      _kSecOIDDeltaCrlIndicator.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDDescription =
      _lookup<CFStringRef>('kSecOIDDescription');

  CFStringRef get kSecOIDDescription => _kSecOIDDescription.value;

  set kSecOIDDescription(CFStringRef value) =>
      _kSecOIDDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDEKU_IPSec =
      _lookup<CFStringRef>('kSecOIDEKU_IPSec');

  CFStringRef get kSecOIDEKU_IPSec => _kSecOIDEKU_IPSec.value;

  set kSecOIDEKU_IPSec(CFStringRef value) => _kSecOIDEKU_IPSec.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDEmailAddress =
      _lookup<CFStringRef>('kSecOIDEmailAddress');

  CFStringRef get kSecOIDEmailAddress => _kSecOIDEmailAddress.value;

  set kSecOIDEmailAddress(CFStringRef value) =>
      _kSecOIDEmailAddress.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDEmailProtection =
      _lookup<CFStringRef>('kSecOIDEmailProtection');

  CFStringRef get kSecOIDEmailProtection => _kSecOIDEmailProtection.value;

  set kSecOIDEmailProtection(CFStringRef value) =>
      _kSecOIDEmailProtection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDExtendedKeyUsage =
      _lookup<CFStringRef>('kSecOIDExtendedKeyUsage');

  CFStringRef get kSecOIDExtendedKeyUsage => _kSecOIDExtendedKeyUsage.value;

  set kSecOIDExtendedKeyUsage(CFStringRef value) =>
      _kSecOIDExtendedKeyUsage.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDExtendedKeyUsageAny =
      _lookup<CFStringRef>('kSecOIDExtendedKeyUsageAny');

  CFStringRef get kSecOIDExtendedKeyUsageAny =>
      _kSecOIDExtendedKeyUsageAny.value;

  set kSecOIDExtendedKeyUsageAny(CFStringRef value) =>
      _kSecOIDExtendedKeyUsageAny.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDExtendedUseCodeSigning =
      _lookup<CFStringRef>('kSecOIDExtendedUseCodeSigning');

  CFStringRef get kSecOIDExtendedUseCodeSigning =>
      _kSecOIDExtendedUseCodeSigning.value;

  set kSecOIDExtendedUseCodeSigning(CFStringRef value) =>
      _kSecOIDExtendedUseCodeSigning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDGivenName =
      _lookup<CFStringRef>('kSecOIDGivenName');

  CFStringRef get kSecOIDGivenName => _kSecOIDGivenName.value;

  set kSecOIDGivenName(CFStringRef value) => _kSecOIDGivenName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDHoldInstructionCode =
      _lookup<CFStringRef>('kSecOIDHoldInstructionCode');

  CFStringRef get kSecOIDHoldInstructionCode =>
      _kSecOIDHoldInstructionCode.value;

  set kSecOIDHoldInstructionCode(CFStringRef value) =>
      _kSecOIDHoldInstructionCode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDInvalidityDate =
      _lookup<CFStringRef>('kSecOIDInvalidityDate');

  CFStringRef get kSecOIDInvalidityDate => _kSecOIDInvalidityDate.value;

  set kSecOIDInvalidityDate(CFStringRef value) =>
      _kSecOIDInvalidityDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDIssuerAltName =
      _lookup<CFStringRef>('kSecOIDIssuerAltName');

  CFStringRef get kSecOIDIssuerAltName => _kSecOIDIssuerAltName.value;

  set kSecOIDIssuerAltName(CFStringRef value) =>
      _kSecOIDIssuerAltName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDIssuingDistributionPoint =
      _lookup<CFStringRef>('kSecOIDIssuingDistributionPoint');

  CFStringRef get kSecOIDIssuingDistributionPoint =>
      _kSecOIDIssuingDistributionPoint.value;

  set kSecOIDIssuingDistributionPoint(CFStringRef value) =>
      _kSecOIDIssuingDistributionPoint.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDIssuingDistributionPoints =
      _lookup<CFStringRef>('kSecOIDIssuingDistributionPoints');

  CFStringRef get kSecOIDIssuingDistributionPoints =>
      _kSecOIDIssuingDistributionPoints.value;

  set kSecOIDIssuingDistributionPoints(CFStringRef value) =>
      _kSecOIDIssuingDistributionPoints.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH =
      _lookup<CFStringRef>('kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH');

  CFStringRef get kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH =>
      _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH.value;

  set kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH(CFStringRef value) =>
      _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDKERBv5_PKINIT_KP_KDC =
      _lookup<CFStringRef>('kSecOIDKERBv5_PKINIT_KP_KDC');

  CFStringRef get kSecOIDKERBv5_PKINIT_KP_KDC =>
      _kSecOIDKERBv5_PKINIT_KP_KDC.value;

  set kSecOIDKERBv5_PKINIT_KP_KDC(CFStringRef value) =>
      _kSecOIDKERBv5_PKINIT_KP_KDC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDKeyUsage =
      _lookup<CFStringRef>('kSecOIDKeyUsage');

  CFStringRef get kSecOIDKeyUsage => _kSecOIDKeyUsage.value;

  set kSecOIDKeyUsage(CFStringRef value) => _kSecOIDKeyUsage.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDLocalityName =
      _lookup<CFStringRef>('kSecOIDLocalityName');

  CFStringRef get kSecOIDLocalityName => _kSecOIDLocalityName.value;

  set kSecOIDLocalityName(CFStringRef value) =>
      _kSecOIDLocalityName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDMS_NTPrincipalName =
      _lookup<CFStringRef>('kSecOIDMS_NTPrincipalName');

  CFStringRef get kSecOIDMS_NTPrincipalName => _kSecOIDMS_NTPrincipalName.value;

  set kSecOIDMS_NTPrincipalName(CFStringRef value) =>
      _kSecOIDMS_NTPrincipalName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDMicrosoftSGC =
      _lookup<CFStringRef>('kSecOIDMicrosoftSGC');

  CFStringRef get kSecOIDMicrosoftSGC => _kSecOIDMicrosoftSGC.value;

  set kSecOIDMicrosoftSGC(CFStringRef value) =>
      _kSecOIDMicrosoftSGC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDNameConstraints =
      _lookup<CFStringRef>('kSecOIDNameConstraints');

  CFStringRef get kSecOIDNameConstraints => _kSecOIDNameConstraints.value;

  set kSecOIDNameConstraints(CFStringRef value) =>
      _kSecOIDNameConstraints.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDNetscapeCertSequence =
      _lookup<CFStringRef>('kSecOIDNetscapeCertSequence');

  CFStringRef get kSecOIDNetscapeCertSequence =>
      _kSecOIDNetscapeCertSequence.value;

  set kSecOIDNetscapeCertSequence(CFStringRef value) =>
      _kSecOIDNetscapeCertSequence.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDNetscapeCertType =
      _lookup<CFStringRef>('kSecOIDNetscapeCertType');

  CFStringRef get kSecOIDNetscapeCertType => _kSecOIDNetscapeCertType.value;

  set kSecOIDNetscapeCertType(CFStringRef value) =>
      _kSecOIDNetscapeCertType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDNetscapeSGC =
      _lookup<CFStringRef>('kSecOIDNetscapeSGC');

  CFStringRef get kSecOIDNetscapeSGC => _kSecOIDNetscapeSGC.value;

  set kSecOIDNetscapeSGC(CFStringRef value) =>
      _kSecOIDNetscapeSGC.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDOCSPSigning =
      _lookup<CFStringRef>('kSecOIDOCSPSigning');

  CFStringRef get kSecOIDOCSPSigning => _kSecOIDOCSPSigning.value;

  set kSecOIDOCSPSigning(CFStringRef value) =>
      _kSecOIDOCSPSigning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDOrganizationName =
      _lookup<CFStringRef>('kSecOIDOrganizationName');

  CFStringRef get kSecOIDOrganizationName => _kSecOIDOrganizationName.value;

  set kSecOIDOrganizationName(CFStringRef value) =>
      _kSecOIDOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDOrganizationalUnitName =
      _lookup<CFStringRef>('kSecOIDOrganizationalUnitName');

  CFStringRef get kSecOIDOrganizationalUnitName =>
      _kSecOIDOrganizationalUnitName.value;

  set kSecOIDOrganizationalUnitName(CFStringRef value) =>
      _kSecOIDOrganizationalUnitName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDPolicyConstraints =
      _lookup<CFStringRef>('kSecOIDPolicyConstraints');

  CFStringRef get kSecOIDPolicyConstraints => _kSecOIDPolicyConstraints.value;

  set kSecOIDPolicyConstraints(CFStringRef value) =>
      _kSecOIDPolicyConstraints.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDPolicyMappings =
      _lookup<CFStringRef>('kSecOIDPolicyMappings');

  CFStringRef get kSecOIDPolicyMappings => _kSecOIDPolicyMappings.value;

  set kSecOIDPolicyMappings(CFStringRef value) =>
      _kSecOIDPolicyMappings.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDPrivateKeyUsagePeriod =
      _lookup<CFStringRef>('kSecOIDPrivateKeyUsagePeriod');

  CFStringRef get kSecOIDPrivateKeyUsagePeriod =>
      _kSecOIDPrivateKeyUsagePeriod.value;

  set kSecOIDPrivateKeyUsagePeriod(CFStringRef value) =>
      _kSecOIDPrivateKeyUsagePeriod.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDQC_Statements =
      _lookup<CFStringRef>('kSecOIDQC_Statements');

  CFStringRef get kSecOIDQC_Statements => _kSecOIDQC_Statements.value;

  set kSecOIDQC_Statements(CFStringRef value) =>
      _kSecOIDQC_Statements.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSerialNumber =
      _lookup<CFStringRef>('kSecOIDSerialNumber');

  CFStringRef get kSecOIDSerialNumber => _kSecOIDSerialNumber.value;

  set kSecOIDSerialNumber(CFStringRef value) =>
      _kSecOIDSerialNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDServerAuth =
      _lookup<CFStringRef>('kSecOIDServerAuth');

  CFStringRef get kSecOIDServerAuth => _kSecOIDServerAuth.value;

  set kSecOIDServerAuth(CFStringRef value) => _kSecOIDServerAuth.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDStateProvinceName =
      _lookup<CFStringRef>('kSecOIDStateProvinceName');

  CFStringRef get kSecOIDStateProvinceName => _kSecOIDStateProvinceName.value;

  set kSecOIDStateProvinceName(CFStringRef value) =>
      _kSecOIDStateProvinceName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDStreetAddress =
      _lookup<CFStringRef>('kSecOIDStreetAddress');

  CFStringRef get kSecOIDStreetAddress => _kSecOIDStreetAddress.value;

  set kSecOIDStreetAddress(CFStringRef value) =>
      _kSecOIDStreetAddress.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectAltName =
      _lookup<CFStringRef>('kSecOIDSubjectAltName');

  CFStringRef get kSecOIDSubjectAltName => _kSecOIDSubjectAltName.value;

  set kSecOIDSubjectAltName(CFStringRef value) =>
      _kSecOIDSubjectAltName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectDirectoryAttributes =
      _lookup<CFStringRef>('kSecOIDSubjectDirectoryAttributes');

  CFStringRef get kSecOIDSubjectDirectoryAttributes =>
      _kSecOIDSubjectDirectoryAttributes.value;

  set kSecOIDSubjectDirectoryAttributes(CFStringRef value) =>
      _kSecOIDSubjectDirectoryAttributes.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectEmailAddress =
      _lookup<CFStringRef>('kSecOIDSubjectEmailAddress');

  CFStringRef get kSecOIDSubjectEmailAddress =>
      _kSecOIDSubjectEmailAddress.value;

  set kSecOIDSubjectEmailAddress(CFStringRef value) =>
      _kSecOIDSubjectEmailAddress.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectInfoAccess =
      _lookup<CFStringRef>('kSecOIDSubjectInfoAccess');

  CFStringRef get kSecOIDSubjectInfoAccess => _kSecOIDSubjectInfoAccess.value;

  set kSecOIDSubjectInfoAccess(CFStringRef value) =>
      _kSecOIDSubjectInfoAccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectKeyIdentifier =
      _lookup<CFStringRef>('kSecOIDSubjectKeyIdentifier');

  CFStringRef get kSecOIDSubjectKeyIdentifier =>
      _kSecOIDSubjectKeyIdentifier.value;

  set kSecOIDSubjectKeyIdentifier(CFStringRef value) =>
      _kSecOIDSubjectKeyIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectPicture =
      _lookup<CFStringRef>('kSecOIDSubjectPicture');

  CFStringRef get kSecOIDSubjectPicture => _kSecOIDSubjectPicture.value;

  set kSecOIDSubjectPicture(CFStringRef value) =>
      _kSecOIDSubjectPicture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSubjectSignatureBitmap =
      _lookup<CFStringRef>('kSecOIDSubjectSignatureBitmap');

  CFStringRef get kSecOIDSubjectSignatureBitmap =>
      _kSecOIDSubjectSignatureBitmap.value;

  set kSecOIDSubjectSignatureBitmap(CFStringRef value) =>
      _kSecOIDSubjectSignatureBitmap.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSurname =
      _lookup<CFStringRef>('kSecOIDSurname');

  CFStringRef get kSecOIDSurname => _kSecOIDSurname.value;

  set kSecOIDSurname(CFStringRef value) => _kSecOIDSurname.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDTimeStamping =
      _lookup<CFStringRef>('kSecOIDTimeStamping');

  CFStringRef get kSecOIDTimeStamping => _kSecOIDTimeStamping.value;

  set kSecOIDTimeStamping(CFStringRef value) =>
      _kSecOIDTimeStamping.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDTitle =
      _lookup<CFStringRef>('kSecOIDTitle');

  CFStringRef get kSecOIDTitle => _kSecOIDTitle.value;

  set kSecOIDTitle(CFStringRef value) => _kSecOIDTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDUseExemptions =
      _lookup<CFStringRef>('kSecOIDUseExemptions');

  CFStringRef get kSecOIDUseExemptions => _kSecOIDUseExemptions.value;

  set kSecOIDUseExemptions(CFStringRef value) =>
      _kSecOIDUseExemptions.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1CertificateIssuerUniqueId =
      _lookup<CFStringRef>('kSecOIDX509V1CertificateIssuerUniqueId');

  CFStringRef get kSecOIDX509V1CertificateIssuerUniqueId =>
      _kSecOIDX509V1CertificateIssuerUniqueId.value;

  set kSecOIDX509V1CertificateIssuerUniqueId(CFStringRef value) =>
      _kSecOIDX509V1CertificateIssuerUniqueId.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1CertificateSubjectUniqueId =
      _lookup<CFStringRef>('kSecOIDX509V1CertificateSubjectUniqueId');

  CFStringRef get kSecOIDX509V1CertificateSubjectUniqueId =>
      _kSecOIDX509V1CertificateSubjectUniqueId.value;

  set kSecOIDX509V1CertificateSubjectUniqueId(CFStringRef value) =>
      _kSecOIDX509V1CertificateSubjectUniqueId.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1IssuerName =
      _lookup<CFStringRef>('kSecOIDX509V1IssuerName');

  CFStringRef get kSecOIDX509V1IssuerName => _kSecOIDX509V1IssuerName.value;

  set kSecOIDX509V1IssuerName(CFStringRef value) =>
      _kSecOIDX509V1IssuerName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1IssuerNameCStruct =
      _lookup<CFStringRef>('kSecOIDX509V1IssuerNameCStruct');

  CFStringRef get kSecOIDX509V1IssuerNameCStruct =>
      _kSecOIDX509V1IssuerNameCStruct.value;

  set kSecOIDX509V1IssuerNameCStruct(CFStringRef value) =>
      _kSecOIDX509V1IssuerNameCStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1IssuerNameLDAP =
      _lookup<CFStringRef>('kSecOIDX509V1IssuerNameLDAP');

  CFStringRef get kSecOIDX509V1IssuerNameLDAP =>
      _kSecOIDX509V1IssuerNameLDAP.value;

  set kSecOIDX509V1IssuerNameLDAP(CFStringRef value) =>
      _kSecOIDX509V1IssuerNameLDAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1IssuerNameStd =
      _lookup<CFStringRef>('kSecOIDX509V1IssuerNameStd');

  CFStringRef get kSecOIDX509V1IssuerNameStd =>
      _kSecOIDX509V1IssuerNameStd.value;

  set kSecOIDX509V1IssuerNameStd(CFStringRef value) =>
      _kSecOIDX509V1IssuerNameStd.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SerialNumber =
      _lookup<CFStringRef>('kSecOIDX509V1SerialNumber');

  CFStringRef get kSecOIDX509V1SerialNumber => _kSecOIDX509V1SerialNumber.value;

  set kSecOIDX509V1SerialNumber(CFStringRef value) =>
      _kSecOIDX509V1SerialNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1Signature =
      _lookup<CFStringRef>('kSecOIDX509V1Signature');

  CFStringRef get kSecOIDX509V1Signature => _kSecOIDX509V1Signature.value;

  set kSecOIDX509V1Signature(CFStringRef value) =>
      _kSecOIDX509V1Signature.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SignatureAlgorithm =
      _lookup<CFStringRef>('kSecOIDX509V1SignatureAlgorithm');

  CFStringRef get kSecOIDX509V1SignatureAlgorithm =>
      _kSecOIDX509V1SignatureAlgorithm.value;

  set kSecOIDX509V1SignatureAlgorithm(CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithm.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V1SignatureAlgorithmParameters =
      _lookup<CFStringRef>('kSecOIDX509V1SignatureAlgorithmParameters');

  CFStringRef get kSecOIDX509V1SignatureAlgorithmParameters =>
      _kSecOIDX509V1SignatureAlgorithmParameters.value;

  set kSecOIDX509V1SignatureAlgorithmParameters(CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithmParameters.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SignatureAlgorithmTBS =
      _lookup<CFStringRef>('kSecOIDX509V1SignatureAlgorithmTBS');

  CFStringRef get kSecOIDX509V1SignatureAlgorithmTBS =>
      _kSecOIDX509V1SignatureAlgorithmTBS.value;

  set kSecOIDX509V1SignatureAlgorithmTBS(CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithmTBS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SignatureCStruct =
      _lookup<CFStringRef>('kSecOIDX509V1SignatureCStruct');

  CFStringRef get kSecOIDX509V1SignatureCStruct =>
      _kSecOIDX509V1SignatureCStruct.value;

  set kSecOIDX509V1SignatureCStruct(CFStringRef value) =>
      _kSecOIDX509V1SignatureCStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SignatureStruct =
      _lookup<CFStringRef>('kSecOIDX509V1SignatureStruct');

  CFStringRef get kSecOIDX509V1SignatureStruct =>
      _kSecOIDX509V1SignatureStruct.value;

  set kSecOIDX509V1SignatureStruct(CFStringRef value) =>
      _kSecOIDX509V1SignatureStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectName =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectName');

  CFStringRef get kSecOIDX509V1SubjectName => _kSecOIDX509V1SubjectName.value;

  set kSecOIDX509V1SubjectName(CFStringRef value) =>
      _kSecOIDX509V1SubjectName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectNameCStruct =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectNameCStruct');

  CFStringRef get kSecOIDX509V1SubjectNameCStruct =>
      _kSecOIDX509V1SubjectNameCStruct.value;

  set kSecOIDX509V1SubjectNameCStruct(CFStringRef value) =>
      _kSecOIDX509V1SubjectNameCStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectNameLDAP =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectNameLDAP');

  CFStringRef get kSecOIDX509V1SubjectNameLDAP =>
      _kSecOIDX509V1SubjectNameLDAP.value;

  set kSecOIDX509V1SubjectNameLDAP(CFStringRef value) =>
      _kSecOIDX509V1SubjectNameLDAP.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectNameStd =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectNameStd');

  CFStringRef get kSecOIDX509V1SubjectNameStd =>
      _kSecOIDX509V1SubjectNameStd.value;

  set kSecOIDX509V1SubjectNameStd(CFStringRef value) =>
      _kSecOIDX509V1SubjectNameStd.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectPublicKey =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectPublicKey');

  CFStringRef get kSecOIDX509V1SubjectPublicKey =>
      _kSecOIDX509V1SubjectPublicKey.value;

  set kSecOIDX509V1SubjectPublicKey(CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectPublicKeyAlgorithm =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectPublicKeyAlgorithm');

  CFStringRef get kSecOIDX509V1SubjectPublicKeyAlgorithm =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithm.value;

  set kSecOIDX509V1SubjectPublicKeyAlgorithm(CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithm.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectPublicKeyAlgorithmParameters');

  CFStringRef get kSecOIDX509V1SubjectPublicKeyAlgorithmParameters =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters.value;

  set kSecOIDX509V1SubjectPublicKeyAlgorithmParameters(CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1SubjectPublicKeyCStruct =
      _lookup<CFStringRef>('kSecOIDX509V1SubjectPublicKeyCStruct');

  CFStringRef get kSecOIDX509V1SubjectPublicKeyCStruct =>
      _kSecOIDX509V1SubjectPublicKeyCStruct.value;

  set kSecOIDX509V1SubjectPublicKeyCStruct(CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyCStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1ValidityNotAfter =
      _lookup<CFStringRef>('kSecOIDX509V1ValidityNotAfter');

  CFStringRef get kSecOIDX509V1ValidityNotAfter =>
      _kSecOIDX509V1ValidityNotAfter.value;

  set kSecOIDX509V1ValidityNotAfter(CFStringRef value) =>
      _kSecOIDX509V1ValidityNotAfter.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1ValidityNotBefore =
      _lookup<CFStringRef>('kSecOIDX509V1ValidityNotBefore');

  CFStringRef get kSecOIDX509V1ValidityNotBefore =>
      _kSecOIDX509V1ValidityNotBefore.value;

  set kSecOIDX509V1ValidityNotBefore(CFStringRef value) =>
      _kSecOIDX509V1ValidityNotBefore.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V1Version =
      _lookup<CFStringRef>('kSecOIDX509V1Version');

  CFStringRef get kSecOIDX509V1Version => _kSecOIDX509V1Version.value;

  set kSecOIDX509V1Version(CFStringRef value) =>
      _kSecOIDX509V1Version.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3Certificate =
      _lookup<CFStringRef>('kSecOIDX509V3Certificate');

  CFStringRef get kSecOIDX509V3Certificate => _kSecOIDX509V3Certificate.value;

  set kSecOIDX509V3Certificate(CFStringRef value) =>
      _kSecOIDX509V3Certificate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3CertificateCStruct =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateCStruct');

  CFStringRef get kSecOIDX509V3CertificateCStruct =>
      _kSecOIDX509V3CertificateCStruct.value;

  set kSecOIDX509V3CertificateCStruct(CFStringRef value) =>
      _kSecOIDX509V3CertificateCStruct.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V3CertificateExtensionCStruct =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionCStruct');

  CFStringRef get kSecOIDX509V3CertificateExtensionCStruct =>
      _kSecOIDX509V3CertificateExtensionCStruct.value;

  set kSecOIDX509V3CertificateExtensionCStruct(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionCStruct.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V3CertificateExtensionCritical =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionCritical');

  CFStringRef get kSecOIDX509V3CertificateExtensionCritical =>
      _kSecOIDX509V3CertificateExtensionCritical.value;

  set kSecOIDX509V3CertificateExtensionCritical(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionCritical.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3CertificateExtensionId =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionId');

  CFStringRef get kSecOIDX509V3CertificateExtensionId =>
      _kSecOIDX509V3CertificateExtensionId.value;

  set kSecOIDX509V3CertificateExtensionId(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionId.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3CertificateExtensionStruct =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionStruct');

  CFStringRef get kSecOIDX509V3CertificateExtensionStruct =>
      _kSecOIDX509V3CertificateExtensionStruct.value;

  set kSecOIDX509V3CertificateExtensionStruct(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3CertificateExtensionType =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionType');

  CFStringRef get kSecOIDX509V3CertificateExtensionType =>
      _kSecOIDX509V3CertificateExtensionType.value;

  set kSecOIDX509V3CertificateExtensionType(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3CertificateExtensionValue =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionValue');

  CFStringRef get kSecOIDX509V3CertificateExtensionValue =>
      _kSecOIDX509V3CertificateExtensionValue.value;

  set kSecOIDX509V3CertificateExtensionValue(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionValue.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V3CertificateExtensionsCStruct =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionsCStruct');

  CFStringRef get kSecOIDX509V3CertificateExtensionsCStruct =>
      _kSecOIDX509V3CertificateExtensionsCStruct.value;

  set kSecOIDX509V3CertificateExtensionsCStruct(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionsCStruct.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V3CertificateExtensionsStruct =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateExtensionsStruct');

  CFStringRef get kSecOIDX509V3CertificateExtensionsStruct =>
      _kSecOIDX509V3CertificateExtensionsStruct.value;

  set kSecOIDX509V3CertificateExtensionsStruct(CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionsStruct.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOIDX509V3CertificateNumberOfExtensions =
      _lookup<CFStringRef>('kSecOIDX509V3CertificateNumberOfExtensions');

  CFStringRef get kSecOIDX509V3CertificateNumberOfExtensions =>
      _kSecOIDX509V3CertificateNumberOfExtensions.value;

  set kSecOIDX509V3CertificateNumberOfExtensions(CFStringRef value) =>
      _kSecOIDX509V3CertificateNumberOfExtensions.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3SignedCertificate =
      _lookup<CFStringRef>('kSecOIDX509V3SignedCertificate');

  CFStringRef get kSecOIDX509V3SignedCertificate =>
      _kSecOIDX509V3SignedCertificate.value;

  set kSecOIDX509V3SignedCertificate(CFStringRef value) =>
      _kSecOIDX509V3SignedCertificate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDX509V3SignedCertificateCStruct =
      _lookup<CFStringRef>('kSecOIDX509V3SignedCertificateCStruct');

  CFStringRef get kSecOIDX509V3SignedCertificateCStruct =>
      _kSecOIDX509V3SignedCertificateCStruct.value;

  set kSecOIDX509V3SignedCertificateCStruct(CFStringRef value) =>
      _kSecOIDX509V3SignedCertificateCStruct.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOIDSRVName =
      _lookup<CFStringRef>('kSecOIDSRVName');

  CFStringRef get kSecOIDSRVName => _kSecOIDSRVName.value;

  set kSecOIDSRVName(CFStringRef value) => _kSecOIDSRVName.value = value;

  int SecIdentitySearchGetTypeID() {
    return _SecIdentitySearchGetTypeID();
  }

  late final _SecIdentitySearchGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'SecIdentitySearchGetTypeID');
  late final _SecIdentitySearchGetTypeID =
      _SecIdentitySearchGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentitySearchCreate(
    CFTypeRef keychainOrArray,
    int keyUsage,
    ffi.Pointer<SecIdentitySearchRef> searchRef,
  ) {
    return _SecIdentitySearchCreate(
      keychainOrArray,
      keyUsage,
      searchRef,
    );
  }

  late final _SecIdentitySearchCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CFTypeRef, ffi.Uint32,
              ffi.Pointer<SecIdentitySearchRef>)>>('SecIdentitySearchCreate');
  late final _SecIdentitySearchCreate = _SecIdentitySearchCreatePtr.asFunction<
      int Function(CFTypeRef, int, ffi.Pointer<SecIdentitySearchRef>)>();

  int SecIdentitySearchCopyNext(
    SecIdentitySearchRef searchRef,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentitySearchCopyNext(
      searchRef,
      identity,
    );
  }

  late final _SecIdentitySearchCopyNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SecIdentitySearchRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentitySearchCopyNext');
  late final _SecIdentitySearchCopyNext =
      _SecIdentitySearchCopyNextPtr.asFunction<
          int Function(SecIdentitySearchRef, ffi.Pointer<SecIdentityRef>)>();

  late final ffi.Pointer<CFStringRef> _kSecCFErrorArchitecture =
      _lookup<CFStringRef>('kSecCFErrorArchitecture');

  CFStringRef get kSecCFErrorArchitecture => _kSecCFErrorArchitecture.value;

  set kSecCFErrorArchitecture(CFStringRef value) =>
      _kSecCFErrorArchitecture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorPattern =
      _lookup<CFStringRef>('kSecCFErrorPattern');

  CFStringRef get kSecCFErrorPattern => _kSecCFErrorPattern.value;

  set kSecCFErrorPattern(CFStringRef value) =>
      _kSecCFErrorPattern.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceSeal =
      _lookup<CFStringRef>('kSecCFErrorResourceSeal');

  CFStringRef get kSecCFErrorResourceSeal => _kSecCFErrorResourceSeal.value;

  set kSecCFErrorResourceSeal(CFStringRef value) =>
      _kSecCFErrorResourceSeal.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceAdded =
      _lookup<CFStringRef>('kSecCFErrorResourceAdded');

  CFStringRef get kSecCFErrorResourceAdded => _kSecCFErrorResourceAdded.value;

  set kSecCFErrorResourceAdded(CFStringRef value) =>
      _kSecCFErrorResourceAdded.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceAltered =
      _lookup<CFStringRef>('kSecCFErrorResourceAltered');

  CFStringRef get kSecCFErrorResourceAltered =>
      _kSecCFErrorResourceAltered.value;

  set kSecCFErrorResourceAltered(CFStringRef value) =>
      _kSecCFErrorResourceAltered.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceMissing =
      _lookup<CFStringRef>('kSecCFErrorResourceMissing');

  CFStringRef get kSecCFErrorResourceMissing =>
      _kSecCFErrorResourceMissing.value;

  set kSecCFErrorResourceMissing(CFStringRef value) =>
      _kSecCFErrorResourceMissing.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceSideband =
      _lookup<CFStringRef>('kSecCFErrorResourceSideband');

  CFStringRef get kSecCFErrorResourceSideband =>
      _kSecCFErrorResourceSideband.value;

  set kSecCFErrorResourceSideband(CFStringRef value) =>
      _kSecCFErrorResourceSideband.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorResourceRecursive =
      _lookup<CFStringRef>('kSecCFErrorResourceRecursive');

  CFStringRef get kSecCFErrorResourceRecursive =>
      _kSecCFErrorResourceRecursive.value;

  set kSecCFErrorResourceRecursive(CFStringRef value) =>
      _kSecCFErrorResourceRecursive.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorInfoPlist =
      _lookup<CFStringRef>('kSecCFErrorInfoPlist');

  CFStringRef get kSecCFErrorInfoPlist => _kSecCFErrorInfoPlist.value;

  set kSecCFErrorInfoPlist(CFStringRef value) =>
      _kSecCFErrorInfoPlist.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorGuestAttributes =
      _lookup<CFStringRef>('kSecCFErrorGuestAttributes');

  CFStringRef get kSecCFErrorGuestAttributes =>
      _kSecCFErrorGuestAttributes.value;

  set kSecCFErrorGuestAttributes(CFStringRef value) =>
      _kSecCFErrorGuestAttributes.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorRequirementSyntax =
      _lookup<CFStringRef>('kSecCFErrorRequirementSyntax');

  CFStringRef get kSecCFErrorRequirementSyntax =>
      _kSecCFErrorRequirementSyntax.value;

  set kSecCFErrorRequirementSyntax(CFStringRef value) =>
      _kSecCFErrorRequirementSyntax.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCFErrorPath =
      _lookup<CFStringRef>('kSecCFErrorPath');

  CFStringRef get kSecCFErrorPath => _kSecCFErrorPath.value;

  set kSecCFErrorPath(CFStringRef value) => _kSecCFErrorPath.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeAttributeArchitecture =
      _lookup<CFStringRef>('kSecCodeAttributeArchitecture');

  CFStringRef get kSecCodeAttributeArchitecture =>
      _kSecCodeAttributeArchitecture.value;

  set kSecCodeAttributeArchitecture(CFStringRef value) =>
      _kSecCodeAttributeArchitecture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeAttributeSubarchitecture =
      _lookup<CFStringRef>('kSecCodeAttributeSubarchitecture');

  CFStringRef get kSecCodeAttributeSubarchitecture =>
      _kSecCodeAttributeSubarchitecture.value;

  set kSecCodeAttributeSubarchitecture(CFStringRef value) =>
      _kSecCodeAttributeSubarchitecture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeAttributeUniversalFileOffset =
      _lookup<CFStringRef>('kSecCodeAttributeUniversalFileOffset');

  CFStringRef get kSecCodeAttributeUniversalFileOffset =>
      _kSecCodeAttributeUniversalFileOffset.value;

  set kSecCodeAttributeUniversalFileOffset(CFStringRef value) =>
      _kSecCodeAttributeUniversalFileOffset.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeAttributeBundleVersion =
      _lookup<CFStringRef>('kSecCodeAttributeBundleVersion');

  CFStringRef get kSecCodeAttributeBundleVersion =>
      _kSecCodeAttributeBundleVersion.value;

  set kSecCodeAttributeBundleVersion(CFStringRef value) =>
      _kSecCodeAttributeBundleVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeCanonical =
      _lookup<CFStringRef>('kSecGuestAttributeCanonical');

  CFStringRef get kSecGuestAttributeCanonical =>
      _kSecGuestAttributeCanonical.value;

  set kSecGuestAttributeCanonical(CFStringRef value) =>
      _kSecGuestAttributeCanonical.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeHash =
      _lookup<CFStringRef>('kSecGuestAttributeHash');

  CFStringRef get kSecGuestAttributeHash => _kSecGuestAttributeHash.value;

  set kSecGuestAttributeHash(CFStringRef value) =>
      _kSecGuestAttributeHash.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeMachPort =
      _lookup<CFStringRef>('kSecGuestAttributeMachPort');

  CFStringRef get kSecGuestAttributeMachPort =>
      _kSecGuestAttributeMachPort.value;

  set kSecGuestAttributeMachPort(CFStringRef value) =>
      _kSecGuestAttributeMachPort.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributePid =
      _lookup<CFStringRef>('kSecGuestAttributePid');

  CFStringRef get kSecGuestAttributePid => _kSecGuestAttributePid.value;

  set kSecGuestAttributePid(CFStringRef value) =>
      _kSecGuestAttributePid.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeAudit =
      _lookup<CFStringRef>('kSecGuestAttributeAudit');

  CFStringRef get kSecGuestAttributeAudit => _kSecGuestAttributeAudit.value;

  set kSecGuestAttributeAudit(CFStringRef value) =>
      _kSecGuestAttributeAudit.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeDynamicCode =
      _lookup<CFStringRef>('kSecGuestAttributeDynamicCode');

  CFStringRef get kSecGuestAttributeDynamicCode =>
      _kSecGuestAttributeDynamicCode.value;

  set kSecGuestAttributeDynamicCode(CFStringRef value) =>
      _kSecGuestAttributeDynamicCode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeDynamicCodeInfoPlist =
      _lookup<CFStringRef>('kSecGuestAttributeDynamicCodeInfoPlist');

  CFStringRef get kSecGuestAttributeDynamicCodeInfoPlist =>
      _kSecGuestAttributeDynamicCodeInfoPlist.value;

  set kSecGuestAttributeDynamicCodeInfoPlist(CFStringRef value) =>
      _kSecGuestAttributeDynamicCodeInfoPlist.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeArchitecture =
      _lookup<CFStringRef>('kSecGuestAttributeArchitecture');

  CFStringRef get kSecGuestAttributeArchitecture =>
      _kSecGuestAttributeArchitecture.value;

  set kSecGuestAttributeArchitecture(CFStringRef value) =>
      _kSecGuestAttributeArchitecture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecGuestAttributeSubarchitecture =
      _lookup<CFStringRef>('kSecGuestAttributeSubarchitecture');

  CFStringRef get kSecGuestAttributeSubarchitecture =>
      _kSecGuestAttributeSubarchitecture.value;

  set kSecGuestAttributeSubarchitecture(CFStringRef value) =>
      _kSecGuestAttributeSubarchitecture.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoCertificates =
      _lookup<CFStringRef>('kSecCodeInfoCertificates');

  CFStringRef get kSecCodeInfoCertificates => _kSecCodeInfoCertificates.value;

  set kSecCodeInfoCertificates(CFStringRef value) =>
      _kSecCodeInfoCertificates.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoChangedFiles =
      _lookup<CFStringRef>('kSecCodeInfoChangedFiles');

  CFStringRef get kSecCodeInfoChangedFiles => _kSecCodeInfoChangedFiles.value;

  set kSecCodeInfoChangedFiles(CFStringRef value) =>
      _kSecCodeInfoChangedFiles.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoCMS =
      _lookup<CFStringRef>('kSecCodeInfoCMS');

  CFStringRef get kSecCodeInfoCMS => _kSecCodeInfoCMS.value;

  set kSecCodeInfoCMS(CFStringRef value) => _kSecCodeInfoCMS.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoDesignatedRequirement =
      _lookup<CFStringRef>('kSecCodeInfoDesignatedRequirement');

  CFStringRef get kSecCodeInfoDesignatedRequirement =>
      _kSecCodeInfoDesignatedRequirement.value;

  set kSecCodeInfoDesignatedRequirement(CFStringRef value) =>
      _kSecCodeInfoDesignatedRequirement.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoEntitlements =
      _lookup<CFStringRef>('kSecCodeInfoEntitlements');

  CFStringRef get kSecCodeInfoEntitlements => _kSecCodeInfoEntitlements.value;

  set kSecCodeInfoEntitlements(CFStringRef value) =>
      _kSecCodeInfoEntitlements.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoEntitlementsDict =
      _lookup<CFStringRef>('kSecCodeInfoEntitlementsDict');

  CFStringRef get kSecCodeInfoEntitlementsDict =>
      _kSecCodeInfoEntitlementsDict.value;

  set kSecCodeInfoEntitlementsDict(CFStringRef value) =>
      _kSecCodeInfoEntitlementsDict.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoFlags =
      _lookup<CFStringRef>('kSecCodeInfoFlags');

  CFStringRef get kSecCodeInfoFlags => _kSecCodeInfoFlags.value;

  set kSecCodeInfoFlags(CFStringRef value) => _kSecCodeInfoFlags.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoFormat =
      _lookup<CFStringRef>('kSecCodeInfoFormat');

  CFStringRef get kSecCodeInfoFormat => _kSecCodeInfoFormat.value;

  set kSecCodeInfoFormat(CFStringRef value) =>
      _kSecCodeInfoFormat.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoDigestAlgorithm =
      _lookup<CFStringRef>('kSecCodeInfoDigestAlgorithm');

  CFStringRef get kSecCodeInfoDigestAlgorithm =>
      _kSecCodeInfoDigestAlgorithm.value;

  set kSecCodeInfoDigestAlgorithm(CFStringRef value) =>
      _kSecCodeInfoDigestAlgorithm.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoDigestAlgorithms =
      _lookup<CFStringRef>('kSecCodeInfoDigestAlgorithms');

  CFStringRef get kSecCodeInfoDigestAlgorithms =>
      _kSecCodeInfoDigestAlgorithms.value;

  set kSecCodeInfoDigestAlgorithms(CFStringRef value) =>
      _kSecCodeInfoDigestAlgorithms.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoPlatformIdentifier =
      _lookup<CFStringRef>('kSecCodeInfoPlatformIdentifier');

  CFStringRef get kSecCodeInfoPlatformIdentifier =>
      _kSecCodeInfoPlatformIdentifier.value;

  set kSecCodeInfoPlatformIdentifier(CFStringRef value) =>
      _kSecCodeInfoPlatformIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoIdentifier =
      _lookup<CFStringRef>('kSecCodeInfoIdentifier');

  CFStringRef get kSecCodeInfoIdentifier => _kSecCodeInfoIdentifier.value;

  set kSecCodeInfoIdentifier(CFStringRef value) =>
      _kSecCodeInfoIdentifier.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecCodeInfoImplicitDesignatedRequirement =
      _lookup<CFStringRef>('kSecCodeInfoImplicitDesignatedRequirement');

  CFStringRef get kSecCodeInfoImplicitDesignatedRequirement =>
      _kSecCodeInfoImplicitDesignatedRequirement.value;

  set kSecCodeInfoImplicitDesignatedRequirement(CFStringRef value) =>
      _kSecCodeInfoImplicitDesignatedRequirement.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecCodeInfoDefaultDesignatedLightweightCodeRequirement =
      _lookup<CFStringRef>(
          'kSecCodeInfoDefaultDesignatedLightweightCodeRequirement');

  CFStringRef get kSecCodeInfoDefaultDesignatedLightweightCodeRequirement =>
      _kSecCodeInfoDefaultDesignatedLightweightCodeRequirement.value;

  set kSecCodeInfoDefaultDesignatedLightweightCodeRequirement(
          CFStringRef value) =>
      _kSecCodeInfoDefaultDesignatedLightweightCodeRequirement.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoMainExecutable =
      _lookup<CFStringRef>('kSecCodeInfoMainExecutable');

  CFStringRef get kSecCodeInfoMainExecutable =>
      _kSecCodeInfoMainExecutable.value;

  set kSecCodeInfoMainExecutable(CFStringRef value) =>
      _kSecCodeInfoMainExecutable.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoPList =
      _lookup<CFStringRef>('kSecCodeInfoPList');

  CFStringRef get kSecCodeInfoPList => _kSecCodeInfoPList.value;

  set kSecCodeInfoPList(CFStringRef value) => _kSecCodeInfoPList.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoRequirements =
      _lookup<CFStringRef>('kSecCodeInfoRequirements');

  CFStringRef get kSecCodeInfoRequirements => _kSecCodeInfoRequirements.value;

  set kSecCodeInfoRequirements(CFStringRef value) =>
      _kSecCodeInfoRequirements.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoRequirementData =
      _lookup<CFStringRef>('kSecCodeInfoRequirementData');

  CFStringRef get kSecCodeInfoRequirementData =>
      _kSecCodeInfoRequirementData.value;

  set kSecCodeInfoRequirementData(CFStringRef value) =>
      _kSecCodeInfoRequirementData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoSource =
      _lookup<CFStringRef>('kSecCodeInfoSource');

  CFStringRef get kSecCodeInfoSource => _kSecCodeInfoSource.value;

  set kSecCodeInfoSource(CFStringRef value) =>
      _kSecCodeInfoSource.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoStatus =
      _lookup<CFStringRef>('kSecCodeInfoStatus');

  CFStringRef get kSecCodeInfoStatus => _kSecCodeInfoStatus.value;

  set kSecCodeInfoStatus(CFStringRef value) =>
      _kSecCodeInfoStatus.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoTeamIdentifier =
      _lookup<CFStringRef>('kSecCodeInfoTeamIdentifier');

  CFStringRef get kSecCodeInfoTeamIdentifier =>
      _kSecCodeInfoTeamIdentifier.value;

  set kSecCodeInfoTeamIdentifier(CFStringRef value) =>
      _kSecCodeInfoTeamIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoTime =
      _lookup<CFStringRef>('kSecCodeInfoTime');

  CFStringRef get kSecCodeInfoTime => _kSecCodeInfoTime.value;

  set kSecCodeInfoTime(CFStringRef value) => _kSecCodeInfoTime.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoTimestamp =
      _lookup<CFStringRef>('kSecCodeInfoTimestamp');

  CFStringRef get kSecCodeInfoTimestamp => _kSecCodeInfoTimestamp.value;

  set kSecCodeInfoTimestamp(CFStringRef value) =>
      _kSecCodeInfoTimestamp.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoTrust =
      _lookup<CFStringRef>('kSecCodeInfoTrust');

  CFStringRef get kSecCodeInfoTrust => _kSecCodeInfoTrust.value;

  set kSecCodeInfoTrust(CFStringRef value) => _kSecCodeInfoTrust.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoUnique =
      _lookup<CFStringRef>('kSecCodeInfoUnique');

  CFStringRef get kSecCodeInfoUnique => _kSecCodeInfoUnique.value;

  set kSecCodeInfoUnique(CFStringRef value) =>
      _kSecCodeInfoUnique.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoCdHashes =
      _lookup<CFStringRef>('kSecCodeInfoCdHashes');

  CFStringRef get kSecCodeInfoCdHashes => _kSecCodeInfoCdHashes.value;

  set kSecCodeInfoCdHashes(CFStringRef value) =>
      _kSecCodeInfoCdHashes.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoRuntimeVersion =
      _lookup<CFStringRef>('kSecCodeInfoRuntimeVersion');

  CFStringRef get kSecCodeInfoRuntimeVersion =>
      _kSecCodeInfoRuntimeVersion.value;

  set kSecCodeInfoRuntimeVersion(CFStringRef value) =>
      _kSecCodeInfoRuntimeVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCodeInfoStapledNotarizationTicket =
      _lookup<CFStringRef>('kSecCodeInfoStapledNotarizationTicket');

  CFStringRef get kSecCodeInfoStapledNotarizationTicket =>
      _kSecCodeInfoStapledNotarizationTicket.value;

  set kSecCodeInfoStapledNotarizationTicket(CFStringRef value) =>
      _kSecCodeInfoStapledNotarizationTicket.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformErrorDomain =
      _lookup<CFStringRef>('kSecTransformErrorDomain');

  CFStringRef get kSecTransformErrorDomain => _kSecTransformErrorDomain.value;

  set kSecTransformErrorDomain(CFStringRef value) =>
      _kSecTransformErrorDomain.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformPreviousErrorKey =
      _lookup<CFStringRef>('kSecTransformPreviousErrorKey');

  CFStringRef get kSecTransformPreviousErrorKey =>
      _kSecTransformPreviousErrorKey.value;

  set kSecTransformPreviousErrorKey(CFStringRef value) =>
      _kSecTransformPreviousErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformAbortOriginatorKey =
      _lookup<CFStringRef>('kSecTransformAbortOriginatorKey');

  CFStringRef get kSecTransformAbortOriginatorKey =>
      _kSecTransformAbortOriginatorKey.value;

  set kSecTransformAbortOriginatorKey(CFStringRef value) =>
      _kSecTransformAbortOriginatorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformInputAttributeName =
      _lookup<CFStringRef>('kSecTransformInputAttributeName');

  CFStringRef get kSecTransformInputAttributeName =>
      _kSecTransformInputAttributeName.value;

  set kSecTransformInputAttributeName(CFStringRef value) =>
      _kSecTransformInputAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformOutputAttributeName =
      _lookup<CFStringRef>('kSecTransformOutputAttributeName');

  CFStringRef get kSecTransformOutputAttributeName =>
      _kSecTransformOutputAttributeName.value;

  set kSecTransformOutputAttributeName(CFStringRef value) =>
      _kSecTransformOutputAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformDebugAttributeName =
      _lookup<CFStringRef>('kSecTransformDebugAttributeName');

  CFStringRef get kSecTransformDebugAttributeName =>
      _kSecTransformDebugAttributeName.value;

  set kSecTransformDebugAttributeName(CFStringRef value) =>
      _kSecTransformDebugAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformTransformName =
      _lookup<CFStringRef>('kSecTransformTransformName');

  CFStringRef get kSecTransformTransformName =>
      _kSecTransformTransformName.value;

  set kSecTransformTransformName(CFStringRef value) =>
      _kSecTransformTransformName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformAbortAttributeName =
      _lookup<CFStringRef>('kSecTransformAbortAttributeName');

  CFStringRef get kSecTransformAbortAttributeName =>
      _kSecTransformAbortAttributeName.value;

  set kSecTransformAbortAttributeName(CFStringRef value) =>
      _kSecTransformAbortAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionCanExecute =
      _lookup<CFStringRef>('kSecTransformActionCanExecute');

  CFStringRef get kSecTransformActionCanExecute =>
      _kSecTransformActionCanExecute.value;

  set kSecTransformActionCanExecute(CFStringRef value) =>
      _kSecTransformActionCanExecute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionStartingExecution =
      _lookup<CFStringRef>('kSecTransformActionStartingExecution');

  CFStringRef get kSecTransformActionStartingExecution =>
      _kSecTransformActionStartingExecution.value;

  set kSecTransformActionStartingExecution(CFStringRef value) =>
      _kSecTransformActionStartingExecution.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionFinalize =
      _lookup<CFStringRef>('kSecTransformActionFinalize');

  CFStringRef get kSecTransformActionFinalize =>
      _kSecTransformActionFinalize.value;

  set kSecTransformActionFinalize(CFStringRef value) =>
      _kSecTransformActionFinalize.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionExternalizeExtraData =
      _lookup<CFStringRef>('kSecTransformActionExternalizeExtraData');

  CFStringRef get kSecTransformActionExternalizeExtraData =>
      _kSecTransformActionExternalizeExtraData.value;

  set kSecTransformActionExternalizeExtraData(CFStringRef value) =>
      _kSecTransformActionExternalizeExtraData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionProcessData =
      _lookup<CFStringRef>('kSecTransformActionProcessData');

  CFStringRef get kSecTransformActionProcessData =>
      _kSecTransformActionProcessData.value;

  set kSecTransformActionProcessData(CFStringRef value) =>
      _kSecTransformActionProcessData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionInternalizeExtraData =
      _lookup<CFStringRef>('kSecTransformActionInternalizeExtraData');

  CFStringRef get kSecTransformActionInternalizeExtraData =>
      _kSecTransformActionInternalizeExtraData.value;

  set kSecTransformActionInternalizeExtraData(CFStringRef value) =>
      _kSecTransformActionInternalizeExtraData.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTransformActionAttributeNotification =
      _lookup<CFStringRef>('kSecTransformActionAttributeNotification');

  CFStringRef get kSecTransformActionAttributeNotification =>
      _kSecTransformActionAttributeNotification.value;

  set kSecTransformActionAttributeNotification(CFStringRef value) =>
      _kSecTransformActionAttributeNotification.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTransformActionAttributeValidation =
      _lookup<CFStringRef>('kSecTransformActionAttributeValidation');

  CFStringRef get kSecTransformActionAttributeValidation =>
      _kSecTransformActionAttributeValidation.value;

  set kSecTransformActionAttributeValidation(CFStringRef value) =>
      _kSecTransformActionAttributeValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecBase64Encoding =
      _lookup<CFStringRef>('kSecBase64Encoding');

  CFStringRef get kSecBase64Encoding => _kSecBase64Encoding.value;

  set kSecBase64Encoding(CFStringRef value) =>
      _kSecBase64Encoding.value = value;

  late final ffi.Pointer<CFStringRef> _kSecBase32Encoding =
      _lookup<CFStringRef>('kSecBase32Encoding');

  CFStringRef get kSecBase32Encoding => _kSecBase32Encoding.value;

  set kSecBase32Encoding(CFStringRef value) =>
      _kSecBase32Encoding.value = value;

  late final ffi.Pointer<CFStringRef> _kSecZLibEncoding =
      _lookup<CFStringRef>('kSecZLibEncoding');

  CFStringRef get kSecZLibEncoding => _kSecZLibEncoding.value;

  set kSecZLibEncoding(CFStringRef value) => _kSecZLibEncoding.value = value;

  late final ffi.Pointer<CFStringRef> _kSecEncodeTypeAttribute =
      _lookup<CFStringRef>('kSecEncodeTypeAttribute');

  CFStringRef get kSecEncodeTypeAttribute => _kSecEncodeTypeAttribute.value;

  set kSecEncodeTypeAttribute(CFStringRef value) =>
      _kSecEncodeTypeAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecLineLength64 =
      _lookup<CFStringRef>('kSecLineLength64');

  CFStringRef get kSecLineLength64 => _kSecLineLength64.value;

  set kSecLineLength64(CFStringRef value) => _kSecLineLength64.value = value;

  late final ffi.Pointer<CFStringRef> _kSecLineLength76 =
      _lookup<CFStringRef>('kSecLineLength76');

  CFStringRef get kSecLineLength76 => _kSecLineLength76.value;

  set kSecLineLength76(CFStringRef value) => _kSecLineLength76.value = value;

  late final ffi.Pointer<CFStringRef> _kSecEncodeLineLengthAttribute =
      _lookup<CFStringRef>('kSecEncodeLineLengthAttribute');

  CFStringRef get kSecEncodeLineLengthAttribute =>
      _kSecEncodeLineLengthAttribute.value;

  set kSecEncodeLineLengthAttribute(CFStringRef value) =>
      _kSecEncodeLineLengthAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecCompressionRatio =
      _lookup<CFStringRef>('kSecCompressionRatio');

  CFStringRef get kSecCompressionRatio => _kSecCompressionRatio.value;

  set kSecCompressionRatio(CFStringRef value) =>
      _kSecCompressionRatio.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDecodeTypeAttribute =
      _lookup<CFStringRef>('kSecDecodeTypeAttribute');

  CFStringRef get kSecDecodeTypeAttribute => _kSecDecodeTypeAttribute.value;

  set kSecDecodeTypeAttribute(CFStringRef value) =>
      _kSecDecodeTypeAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestMD2 =
      _lookup<CFStringRef>('kSecDigestMD2');

  CFStringRef get kSecDigestMD2 => _kSecDigestMD2.value;

  set kSecDigestMD2(CFStringRef value) => _kSecDigestMD2.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestMD4 =
      _lookup<CFStringRef>('kSecDigestMD4');

  CFStringRef get kSecDigestMD4 => _kSecDigestMD4.value;

  set kSecDigestMD4(CFStringRef value) => _kSecDigestMD4.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestMD5 =
      _lookup<CFStringRef>('kSecDigestMD5');

  CFStringRef get kSecDigestMD5 => _kSecDigestMD5.value;

  set kSecDigestMD5(CFStringRef value) => _kSecDigestMD5.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestSHA1 =
      _lookup<CFStringRef>('kSecDigestSHA1');

  CFStringRef get kSecDigestSHA1 => _kSecDigestSHA1.value;

  set kSecDigestSHA1(CFStringRef value) => _kSecDigestSHA1.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestSHA2 =
      _lookup<CFStringRef>('kSecDigestSHA2');

  CFStringRef get kSecDigestSHA2 => _kSecDigestSHA2.value;

  set kSecDigestSHA2(CFStringRef value) => _kSecDigestSHA2.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestHMACMD5 =
      _lookup<CFStringRef>('kSecDigestHMACMD5');

  CFStringRef get kSecDigestHMACMD5 => _kSecDigestHMACMD5.value;

  set kSecDigestHMACMD5(CFStringRef value) => _kSecDigestHMACMD5.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestHMACSHA1 =
      _lookup<CFStringRef>('kSecDigestHMACSHA1');

  CFStringRef get kSecDigestHMACSHA1 => _kSecDigestHMACSHA1.value;

  set kSecDigestHMACSHA1(CFStringRef value) =>
      _kSecDigestHMACSHA1.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestHMACSHA2 =
      _lookup<CFStringRef>('kSecDigestHMACSHA2');

  CFStringRef get kSecDigestHMACSHA2 => _kSecDigestHMACSHA2.value;

  set kSecDigestHMACSHA2(CFStringRef value) =>
      _kSecDigestHMACSHA2.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestTypeAttribute =
      _lookup<CFStringRef>('kSecDigestTypeAttribute');

  CFStringRef get kSecDigestTypeAttribute => _kSecDigestTypeAttribute.value;

  set kSecDigestTypeAttribute(CFStringRef value) =>
      _kSecDigestTypeAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestLengthAttribute =
      _lookup<CFStringRef>('kSecDigestLengthAttribute');

  CFStringRef get kSecDigestLengthAttribute => _kSecDigestLengthAttribute.value;

  set kSecDigestLengthAttribute(CFStringRef value) =>
      _kSecDigestLengthAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecDigestHMACKeyAttribute =
      _lookup<CFStringRef>('kSecDigestHMACKeyAttribute');

  CFStringRef get kSecDigestHMACKeyAttribute =>
      _kSecDigestHMACKeyAttribute.value;

  set kSecDigestHMACKeyAttribute(CFStringRef value) =>
      _kSecDigestHMACKeyAttribute.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingNoneKey =
      _lookup<CFStringRef>('kSecPaddingNoneKey');

  CFStringRef get kSecPaddingNoneKey => _kSecPaddingNoneKey.value;

  set kSecPaddingNoneKey(CFStringRef value) =>
      _kSecPaddingNoneKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingPKCS1Key =
      _lookup<CFStringRef>('kSecPaddingPKCS1Key');

  CFStringRef get kSecPaddingPKCS1Key => _kSecPaddingPKCS1Key.value;

  set kSecPaddingPKCS1Key(CFStringRef value) =>
      _kSecPaddingPKCS1Key.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingPKCS5Key =
      _lookup<CFStringRef>('kSecPaddingPKCS5Key');

  CFStringRef get kSecPaddingPKCS5Key => _kSecPaddingPKCS5Key.value;

  set kSecPaddingPKCS5Key(CFStringRef value) =>
      _kSecPaddingPKCS5Key.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingPKCS7Key =
      _lookup<CFStringRef>('kSecPaddingPKCS7Key');

  CFStringRef get kSecPaddingPKCS7Key => _kSecPaddingPKCS7Key.value;

  set kSecPaddingPKCS7Key(CFStringRef value) =>
      _kSecPaddingPKCS7Key.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingOAEPKey =
      _lookup<CFStringRef>('kSecPaddingOAEPKey');

  CFStringRef get kSecPaddingOAEPKey => _kSecPaddingOAEPKey.value;

  set kSecPaddingOAEPKey(CFStringRef value) =>
      _kSecPaddingOAEPKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecModeNoneKey =
      _lookup<CFStringRef>('kSecModeNoneKey');

  CFStringRef get kSecModeNoneKey => _kSecModeNoneKey.value;

  set kSecModeNoneKey(CFStringRef value) => _kSecModeNoneKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecModeECBKey =
      _lookup<CFStringRef>('kSecModeECBKey');

  CFStringRef get kSecModeECBKey => _kSecModeECBKey.value;

  set kSecModeECBKey(CFStringRef value) => _kSecModeECBKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecModeCBCKey =
      _lookup<CFStringRef>('kSecModeCBCKey');

  CFStringRef get kSecModeCBCKey => _kSecModeCBCKey.value;

  set kSecModeCBCKey(CFStringRef value) => _kSecModeCBCKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecModeCFBKey =
      _lookup<CFStringRef>('kSecModeCFBKey');

  CFStringRef get kSecModeCFBKey => _kSecModeCFBKey.value;

  set kSecModeCFBKey(CFStringRef value) => _kSecModeCFBKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecModeOFBKey =
      _lookup<CFStringRef>('kSecModeOFBKey');

  CFStringRef get kSecModeOFBKey => _kSecModeOFBKey.value;

  set kSecModeOFBKey(CFStringRef value) => _kSecModeOFBKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecEncryptKey =
      _lookup<CFStringRef>('kSecEncryptKey');

  CFStringRef get kSecEncryptKey => _kSecEncryptKey.value;

  set kSecEncryptKey(CFStringRef value) => _kSecEncryptKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPaddingKey =
      _lookup<CFStringRef>('kSecPaddingKey');

  CFStringRef get kSecPaddingKey => _kSecPaddingKey.value;

  set kSecPaddingKey(CFStringRef value) => _kSecPaddingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIVKey =
      _lookup<CFStringRef>('kSecIVKey');

  CFStringRef get kSecIVKey => _kSecIVKey.value;

  set kSecIVKey(CFStringRef value) => _kSecIVKey.value = value;

  late final ffi.Pointer<CFStringRef> _kSecEncryptionMode =
      _lookup<CFStringRef>('kSecEncryptionMode');

  CFStringRef get kSecEncryptionMode => _kSecEncryptionMode.value;

  set kSecEncryptionMode(CFStringRef value) =>
      _kSecEncryptionMode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOAEPMessageLengthAttributeName =
      _lookup<CFStringRef>('kSecOAEPMessageLengthAttributeName');

  CFStringRef get kSecOAEPMessageLengthAttributeName =>
      _kSecOAEPMessageLengthAttributeName.value;

  set kSecOAEPMessageLengthAttributeName(CFStringRef value) =>
      _kSecOAEPMessageLengthAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecOAEPEncodingParametersAttributeName =
      _lookup<CFStringRef>('kSecOAEPEncodingParametersAttributeName');

  CFStringRef get kSecOAEPEncodingParametersAttributeName =>
      _kSecOAEPEncodingParametersAttributeName.value;

  set kSecOAEPEncodingParametersAttributeName(CFStringRef value) =>
      _kSecOAEPEncodingParametersAttributeName.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecOAEPMGF1DigestAlgorithmAttributeName =
      _lookup<CFStringRef>('kSecOAEPMGF1DigestAlgorithmAttributeName');

  CFStringRef get kSecOAEPMGF1DigestAlgorithmAttributeName =>
      _kSecOAEPMGF1DigestAlgorithmAttributeName.value;

  set kSecOAEPMGF1DigestAlgorithmAttributeName(CFStringRef value) =>
      _kSecOAEPMGF1DigestAlgorithmAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecKeyAttributeName =
      _lookup<CFStringRef>('kSecKeyAttributeName');

  CFStringRef get kSecKeyAttributeName => _kSecKeyAttributeName.value;

  set kSecKeyAttributeName(CFStringRef value) =>
      _kSecKeyAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecSignatureAttributeName =
      _lookup<CFStringRef>('kSecSignatureAttributeName');

  CFStringRef get kSecSignatureAttributeName =>
      _kSecSignatureAttributeName.value;

  late final ffi.Pointer<CFStringRef> _kSecInputIsAttributeName =
      _lookup<CFStringRef>('kSecInputIsAttributeName');

  CFStringRef get kSecInputIsAttributeName => _kSecInputIsAttributeName.value;

  set kSecInputIsAttributeName(CFStringRef value) =>
      _kSecInputIsAttributeName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecInputIsPlainText =
      _lookup<CFStringRef>('kSecInputIsPlainText');

  CFStringRef get kSecInputIsPlainText => _kSecInputIsPlainText.value;

  set kSecInputIsPlainText(CFStringRef value) =>
      _kSecInputIsPlainText.value = value;

  late final ffi.Pointer<CFStringRef> _kSecInputIsDigest =
      _lookup<CFStringRef>('kSecInputIsDigest');

  CFStringRef get kSecInputIsDigest => _kSecInputIsDigest.value;

  late final ffi.Pointer<CFStringRef> _kSecInputIsRaw =
      _lookup<CFStringRef>('kSecInputIsRaw');

  CFStringRef get kSecInputIsRaw => _kSecInputIsRaw.value;

  set kSecInputIsRaw(CFStringRef value) => _kSecInputIsRaw.value = value;
}

typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef CFStringRef = ffi.Pointer<__CFString>;

final class __CFString extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;

final class __CFData extends ffi.Opaque {}

final class __CFAllocator extends ffi.Opaque {}

final class CFRange extends ffi.Struct {
  @ffi.Long()
  external int location;

  @ffi.Long()
  external int length;
}

enum CFDataSearchFlags {
  kCFDataSearchBackwards(1),
  kCFDataSearchAnchored(2);

  final int value;
  const CFDataSearchFlags(this.value);

  static CFDataSearchFlags fromValue(int value) => switch (value) {
        1 => kCFDataSearchBackwards,
        2 => kCFDataSearchAnchored,
        _ => throw ArgumentError("Unknown value for CFDataSearchFlags: $value"),
      };
}

typedef CFDateRef = ffi.Pointer<__CFDate>;

final class __CFDate extends ffi.Opaque {}

enum CFComparisonResult {
  kCFCompareLessThan(-1),
  kCFCompareEqualTo(0),
  kCFCompareGreaterThan(1);

  final int value;
  const CFComparisonResult(this.value);

  static CFComparisonResult fromValue(int value) => switch (value) {
        -1 => kCFCompareLessThan,
        0 => kCFCompareEqualTo,
        1 => kCFCompareGreaterThan,
        _ =>
          throw ArgumentError("Unknown value for CFComparisonResult: $value"),
      };
}

final class CFDictionaryKeyCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryRetainCallBackFunction>>;
typedef CFDictionaryRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<__CFAllocator> allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryReleaseCallBackFunction>>;
typedef CFDictionaryReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<__CFAllocator> allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryReleaseCallBackFunction = void Function(
    ffi.Pointer<__CFAllocator> allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFDictionaryCopyDescriptionCallBackFunction>>;
typedef CFDictionaryCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFDictionaryEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryEqualCallBackFunction>>;
typedef CFDictionaryEqualCallBackFunction = ffi.UnsignedChar Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFDictionaryEqualCallBackFunction = int Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFDictionaryHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryHashCallBackFunction>>;
typedef CFDictionaryHashCallBackFunction = ffi.UnsignedLong Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryHashCallBackFunction = int Function(
    ffi.Pointer<ffi.Void> value);

final class CFDictionaryValueCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;

final class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryApplierFunctionFunction>>;
typedef CFDictionaryApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);
typedef DartCFDictionaryApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);

enum SecKeyUsage {
  kSecKeyUsageUnspecified(0),
  kSecKeyUsageDigitalSignature(1),
  kSecKeyUsageNonRepudiation(2),
  kSecKeyUsageKeyEncipherment(4),
  kSecKeyUsageDataEncipherment(8),
  kSecKeyUsageKeyAgreement(16),
  kSecKeyUsageKeyCertSign(32),
  kSecKeyUsageCRLSign(64),
  kSecKeyUsageEncipherOnly(128),
  kSecKeyUsageDecipherOnly(256),
  kSecKeyUsageCritical(-2147483648),
  kSecKeyUsageAll(2147483647);

  static const kSecKeyUsageContentCommitment = kSecKeyUsageNonRepudiation;

  final int value;
  const SecKeyUsage(this.value);

  static SecKeyUsage fromValue(int value) => switch (value) {
        0 => kSecKeyUsageUnspecified,
        1 => kSecKeyUsageDigitalSignature,
        2 => kSecKeyUsageNonRepudiation,
        4 => kSecKeyUsageKeyEncipherment,
        8 => kSecKeyUsageDataEncipherment,
        16 => kSecKeyUsageKeyAgreement,
        32 => kSecKeyUsageKeyCertSign,
        64 => kSecKeyUsageCRLSign,
        128 => kSecKeyUsageEncipherOnly,
        256 => kSecKeyUsageDecipherOnly,
        -2147483648 => kSecKeyUsageCritical,
        2147483647 => kSecKeyUsageAll,
        _ => throw ArgumentError("Unknown value for SecKeyUsage: $value"),
      };

  @override
  String toString() {
    if (this == kSecKeyUsageNonRepudiation)
      return "SecKeyUsage.kSecKeyUsageNonRepudiation, SecKeyUsage.kSecKeyUsageContentCommitment";
    return super.toString();
  }
}

final class __SecCertificate extends ffi.Opaque {}

typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

final class __SecIdentity extends ffi.Opaque {}

final class __SecKey extends ffi.Opaque {}

final class __CFArray extends ffi.Opaque {}

enum SecAccessControlCreateFlags {
  kSecAccessControlUserPresence(1),
  kSecAccessControlBiometryAny(2),
  kSecAccessControlBiometryCurrentSet(8),
  kSecAccessControlDevicePasscode(16),
  kSecAccessControlWatch(32),
  kSecAccessControlOr(16384),
  kSecAccessControlAnd(32768),
  kSecAccessControlPrivateKeyUsage(1073741824),
  kSecAccessControlApplicationPassword(2147483648);

  static const kSecAccessControlTouchIDAny = kSecAccessControlBiometryAny;
  static const kSecAccessControlTouchIDCurrentSet =
      kSecAccessControlBiometryCurrentSet;
  static const kSecAccessControlCompanion = kSecAccessControlWatch;

  final int value;
  const SecAccessControlCreateFlags(this.value);

  static SecAccessControlCreateFlags fromValue(int value) => switch (value) {
        1 => kSecAccessControlUserPresence,
        2 => kSecAccessControlBiometryAny,
        8 => kSecAccessControlBiometryCurrentSet,
        16 => kSecAccessControlDevicePasscode,
        32 => kSecAccessControlWatch,
        16384 => kSecAccessControlOr,
        32768 => kSecAccessControlAnd,
        1073741824 => kSecAccessControlPrivateKeyUsage,
        2147483648 => kSecAccessControlApplicationPassword,
        _ => throw ArgumentError(
            "Unknown value for SecAccessControlCreateFlags: $value"),
      };

  @override
  String toString() {
    if (this == kSecAccessControlBiometryAny)
      return "SecAccessControlCreateFlags.kSecAccessControlBiometryAny, SecAccessControlCreateFlags.kSecAccessControlTouchIDAny";
    if (this == kSecAccessControlBiometryCurrentSet)
      return "SecAccessControlCreateFlags.kSecAccessControlBiometryCurrentSet, SecAccessControlCreateFlags.kSecAccessControlTouchIDCurrentSet";
    if (this == kSecAccessControlWatch)
      return "SecAccessControlCreateFlags.kSecAccessControlWatch, SecAccessControlCreateFlags.kSecAccessControlCompanion";
    return super.toString();
  }
}

final class __CFBoolean extends ffi.Opaque {}

final class CFBinaryHeapCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<__CFAllocator> allocator,
              ffi.Pointer<ffi.Void> ptr)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<__CFAllocator> allocator,
              ffi.Pointer<ffi.Void> ptr)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> ptr)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Void> ptr1,
              ffi.Pointer<ffi.Void> ptr2,
              ffi.Pointer<ffi.Void> context)>> compare;
}

enum CFStringBuiltInEncodings {
  kCFStringEncodingMacRoman(0),
  kCFStringEncodingWindowsLatin1(1280),
  kCFStringEncodingISOLatin1(513),
  kCFStringEncodingNextStepLatin(2817),
  kCFStringEncodingASCII(1536),
  kCFStringEncodingUnicode(256),
  kCFStringEncodingUTF8(134217984),
  kCFStringEncodingNonLossyASCII(3071),
  kCFStringEncodingUTF16BE(268435712),
  kCFStringEncodingUTF16LE(335544576),
  kCFStringEncodingUTF32(201326848),
  kCFStringEncodingUTF32BE(402653440),
  kCFStringEncodingUTF32LE(469762304);

  static const kCFStringEncodingUTF16 = kCFStringEncodingUnicode;

  final int value;
  const CFStringBuiltInEncodings(this.value);

  static CFStringBuiltInEncodings fromValue(int value) => switch (value) {
        0 => kCFStringEncodingMacRoman,
        1280 => kCFStringEncodingWindowsLatin1,
        513 => kCFStringEncodingISOLatin1,
        2817 => kCFStringEncodingNextStepLatin,
        1536 => kCFStringEncodingASCII,
        256 => kCFStringEncodingUnicode,
        134217984 => kCFStringEncodingUTF8,
        3071 => kCFStringEncodingNonLossyASCII,
        268435712 => kCFStringEncodingUTF16BE,
        335544576 => kCFStringEncodingUTF16LE,
        201326848 => kCFStringEncodingUTF32,
        402653440 => kCFStringEncodingUTF32BE,
        469762304 => kCFStringEncodingUTF32LE,
        _ => throw ArgumentError(
            "Unknown value for CFStringBuiltInEncodings: $value"),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingUnicode)
      return "CFStringBuiltInEncodings.kCFStringEncodingUnicode, CFStringBuiltInEncodings.kCFStringEncodingUTF16";
    return super.toString();
  }
}

typedef CFStringEncoding = ffi.UnsignedInt;
typedef DartCFStringEncoding = int;

final class __CFError extends ffi.Opaque {}

enum CFStringCompareFlags {
  kCFCompareCaseInsensitive(1),
  kCFCompareBackwards(4),
  kCFCompareAnchored(8),
  kCFCompareNonliteral(16),
  kCFCompareLocalized(32),
  kCFCompareNumerically(64),
  kCFCompareDiacriticInsensitive(128),
  kCFCompareWidthInsensitive(256),
  kCFCompareForcedOrdering(512);

  final int value;
  const CFStringCompareFlags(this.value);

  static CFStringCompareFlags fromValue(int value) => switch (value) {
        1 => kCFCompareCaseInsensitive,
        4 => kCFCompareBackwards,
        8 => kCFCompareAnchored,
        16 => kCFCompareNonliteral,
        32 => kCFCompareLocalized,
        64 => kCFCompareNumerically,
        128 => kCFCompareDiacriticInsensitive,
        256 => kCFCompareWidthInsensitive,
        512 => kCFCompareForcedOrdering,
        _ =>
          throw ArgumentError("Unknown value for CFStringCompareFlags: $value"),
      };
}

final class __CFLocale extends ffi.Opaque {}

final class __CFCharacterSet extends ffi.Opaque {}

enum CFStringNormalizationForm {
  kCFStringNormalizationFormD(0),
  kCFStringNormalizationFormKD(1),
  kCFStringNormalizationFormC(2),
  kCFStringNormalizationFormKC(3);

  final int value;
  const CFStringNormalizationForm(this.value);

  static CFStringNormalizationForm fromValue(int value) => switch (value) {
        0 => kCFStringNormalizationFormD,
        1 => kCFStringNormalizationFormKD,
        2 => kCFStringNormalizationFormC,
        3 => kCFStringNormalizationFormKC,
        _ => throw ArgumentError(
            "Unknown value for CFStringNormalizationForm: $value"),
      };
}

final class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedShort> buffer;

  external CFStringRef theString;

  external ffi.Pointer<ffi.UnsignedShort> directUniCharBuffer;

  external ffi.Pointer<ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @ffi.Long()
  external int bufferedRangeStart;

  @ffi.Long()
  external int bufferedRangeEnd;
}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;

final class __CFDateFormatter extends ffi.Opaque {}

enum CFISO8601DateFormatOptions {
  kCFISO8601DateFormatWithYear(1),
  kCFISO8601DateFormatWithMonth(2),
  kCFISO8601DateFormatWithWeekOfYear(4),
  kCFISO8601DateFormatWithDay(16),
  kCFISO8601DateFormatWithTime(32),
  kCFISO8601DateFormatWithTimeZone(64),
  kCFISO8601DateFormatWithSpaceBetweenDateAndTime(128),
  kCFISO8601DateFormatWithDashSeparatorInDate(256),
  kCFISO8601DateFormatWithColonSeparatorInTime(512),
  kCFISO8601DateFormatWithColonSeparatorInTimeZone(1024),
  kCFISO8601DateFormatWithFractionalSeconds(2048),
  kCFISO8601DateFormatWithFullDate(275),
  kCFISO8601DateFormatWithFullTime(1632),
  kCFISO8601DateFormatWithInternetDateTime(1907);

  final int value;
  const CFISO8601DateFormatOptions(this.value);

  static CFISO8601DateFormatOptions fromValue(int value) => switch (value) {
        1 => kCFISO8601DateFormatWithYear,
        2 => kCFISO8601DateFormatWithMonth,
        4 => kCFISO8601DateFormatWithWeekOfYear,
        16 => kCFISO8601DateFormatWithDay,
        32 => kCFISO8601DateFormatWithTime,
        64 => kCFISO8601DateFormatWithTimeZone,
        128 => kCFISO8601DateFormatWithSpaceBetweenDateAndTime,
        256 => kCFISO8601DateFormatWithDashSeparatorInDate,
        512 => kCFISO8601DateFormatWithColonSeparatorInTime,
        1024 => kCFISO8601DateFormatWithColonSeparatorInTimeZone,
        2048 => kCFISO8601DateFormatWithFractionalSeconds,
        275 => kCFISO8601DateFormatWithFullDate,
        1632 => kCFISO8601DateFormatWithFullTime,
        1907 => kCFISO8601DateFormatWithInternetDateTime,
        _ => throw ArgumentError(
            "Unknown value for CFISO8601DateFormatOptions: $value"),
      };
}

enum CFDateFormatterStyle {
  kCFDateFormatterNoStyle(0),
  kCFDateFormatterShortStyle(1),
  kCFDateFormatterMediumStyle(2),
  kCFDateFormatterLongStyle(3),
  kCFDateFormatterFullStyle(4);

  final int value;
  const CFDateFormatterStyle(this.value);

  static CFDateFormatterStyle fromValue(int value) => switch (value) {
        0 => kCFDateFormatterNoStyle,
        1 => kCFDateFormatterShortStyle,
        2 => kCFDateFormatterMediumStyle,
        3 => kCFDateFormatterLongStyle,
        4 => kCFDateFormatterFullStyle,
        _ =>
          throw ArgumentError("Unknown value for CFDateFormatterStyle: $value"),
      };
}

typedef CFDateFormatterKey = CFStringRef;

enum CFStringEncodings {
  kCFStringEncodingMacJapanese(1),
  kCFStringEncodingMacChineseTrad(2),
  kCFStringEncodingMacKorean(3),
  kCFStringEncodingMacArabic(4),
  kCFStringEncodingMacHebrew(5),
  kCFStringEncodingMacGreek(6),
  kCFStringEncodingMacCyrillic(7),
  kCFStringEncodingMacDevanagari(9),
  kCFStringEncodingMacGurmukhi(10),
  kCFStringEncodingMacGujarati(11),
  kCFStringEncodingMacOriya(12),
  kCFStringEncodingMacBengali(13),
  kCFStringEncodingMacTamil(14),
  kCFStringEncodingMacTelugu(15),
  kCFStringEncodingMacKannada(16),
  kCFStringEncodingMacMalayalam(17),
  kCFStringEncodingMacSinhalese(18),
  kCFStringEncodingMacBurmese(19),
  kCFStringEncodingMacKhmer(20),
  kCFStringEncodingMacThai(21),
  kCFStringEncodingMacLaotian(22),
  kCFStringEncodingMacGeorgian(23),
  kCFStringEncodingMacArmenian(24),
  kCFStringEncodingMacChineseSimp(25),
  kCFStringEncodingMacTibetan(26),
  kCFStringEncodingMacMongolian(27),
  kCFStringEncodingMacEthiopic(28),
  kCFStringEncodingMacCentralEurRoman(29),
  kCFStringEncodingMacVietnamese(30),
  kCFStringEncodingMacExtArabic(31),
  kCFStringEncodingMacSymbol(33),
  kCFStringEncodingMacDingbats(34),
  kCFStringEncodingMacTurkish(35),
  kCFStringEncodingMacCroatian(36),
  kCFStringEncodingMacIcelandic(37),
  kCFStringEncodingMacRomanian(38),
  kCFStringEncodingMacCeltic(39),
  kCFStringEncodingMacGaelic(40),
  kCFStringEncodingMacFarsi(140),
  kCFStringEncodingMacUkrainian(152),
  kCFStringEncodingMacInuit(236),
  kCFStringEncodingMacVT100(252),
  kCFStringEncodingMacHFS(255),
  kCFStringEncodingISOLatin2(514),
  kCFStringEncodingISOLatin3(515),
  kCFStringEncodingISOLatin4(516),
  kCFStringEncodingISOLatinCyrillic(517),
  kCFStringEncodingISOLatinArabic(518),
  kCFStringEncodingISOLatinGreek(519),
  kCFStringEncodingISOLatinHebrew(520),
  kCFStringEncodingISOLatin5(521),
  kCFStringEncodingISOLatin6(522),
  kCFStringEncodingISOLatinThai(523),
  kCFStringEncodingISOLatin7(525),
  kCFStringEncodingISOLatin8(526),
  kCFStringEncodingISOLatin9(527),
  kCFStringEncodingISOLatin10(528),
  kCFStringEncodingDOSLatinUS(1024),
  kCFStringEncodingDOSGreek(1029),
  kCFStringEncodingDOSBalticRim(1030),
  kCFStringEncodingDOSLatin1(1040),
  kCFStringEncodingDOSGreek1(1041),
  kCFStringEncodingDOSLatin2(1042),
  kCFStringEncodingDOSCyrillic(1043),
  kCFStringEncodingDOSTurkish(1044),
  kCFStringEncodingDOSPortuguese(1045),
  kCFStringEncodingDOSIcelandic(1046),
  kCFStringEncodingDOSHebrew(1047),
  kCFStringEncodingDOSCanadianFrench(1048),
  kCFStringEncodingDOSArabic(1049),
  kCFStringEncodingDOSNordic(1050),
  kCFStringEncodingDOSRussian(1051),
  kCFStringEncodingDOSGreek2(1052),
  kCFStringEncodingDOSThai(1053),
  kCFStringEncodingDOSJapanese(1056),
  kCFStringEncodingDOSChineseSimplif(1057),
  kCFStringEncodingDOSKorean(1058),
  kCFStringEncodingDOSChineseTrad(1059),
  kCFStringEncodingWindowsLatin2(1281),
  kCFStringEncodingWindowsCyrillic(1282),
  kCFStringEncodingWindowsGreek(1283),
  kCFStringEncodingWindowsLatin5(1284),
  kCFStringEncodingWindowsHebrew(1285),
  kCFStringEncodingWindowsArabic(1286),
  kCFStringEncodingWindowsBalticRim(1287),
  kCFStringEncodingWindowsVietnamese(1288),
  kCFStringEncodingWindowsKoreanJohab(1296),
  kCFStringEncodingANSEL(1537),
  kCFStringEncodingJIS_X0201_76(1568),
  kCFStringEncodingJIS_X0208_83(1569),
  kCFStringEncodingJIS_X0208_90(1570),
  kCFStringEncodingJIS_X0212_90(1571),
  kCFStringEncodingJIS_C6226_78(1572),
  kCFStringEncodingShiftJIS_X0213(1576),
  kCFStringEncodingShiftJIS_X0213_MenKuTen(1577),
  kCFStringEncodingGB_2312_80(1584),
  kCFStringEncodingGBK_95(1585),
  kCFStringEncodingGB_18030_2000(1586),
  kCFStringEncodingKSC_5601_87(1600),
  kCFStringEncodingKSC_5601_92_Johab(1601),
  kCFStringEncodingCNS_11643_92_P1(1617),
  kCFStringEncodingCNS_11643_92_P2(1618),
  kCFStringEncodingCNS_11643_92_P3(1619),
  kCFStringEncodingISO_2022_JP(2080),
  kCFStringEncodingISO_2022_JP_2(2081),
  kCFStringEncodingISO_2022_JP_1(2082),
  kCFStringEncodingISO_2022_JP_3(2083),
  kCFStringEncodingISO_2022_CN(2096),
  kCFStringEncodingISO_2022_CN_EXT(2097),
  kCFStringEncodingISO_2022_KR(2112),
  kCFStringEncodingEUC_JP(2336),
  kCFStringEncodingEUC_CN(2352),
  kCFStringEncodingEUC_TW(2353),
  kCFStringEncodingEUC_KR(2368),
  kCFStringEncodingShiftJIS(2561),
  kCFStringEncodingKOI8_R(2562),
  kCFStringEncodingBig5(2563),
  kCFStringEncodingMacRomanLatin1(2564),
  kCFStringEncodingHZ_GB_2312(2565),
  kCFStringEncodingBig5_HKSCS_1999(2566),
  kCFStringEncodingVISCII(2567),
  kCFStringEncodingKOI8_U(2568),
  kCFStringEncodingBig5_E(2569),
  kCFStringEncodingNextStepJapanese(2818),
  kCFStringEncodingEBCDIC_US(3073),
  kCFStringEncodingEBCDIC_CP037(3074),
  kCFStringEncodingUTF7(67109120),
  kCFStringEncodingUTF7_IMAP(2576);

  static const kCFStringEncodingShiftJIS_X0213_00 =
      kCFStringEncodingShiftJIS_X0213;

  final int value;
  const CFStringEncodings(this.value);

  static CFStringEncodings fromValue(int value) => switch (value) {
        1 => kCFStringEncodingMacJapanese,
        2 => kCFStringEncodingMacChineseTrad,
        3 => kCFStringEncodingMacKorean,
        4 => kCFStringEncodingMacArabic,
        5 => kCFStringEncodingMacHebrew,
        6 => kCFStringEncodingMacGreek,
        7 => kCFStringEncodingMacCyrillic,
        9 => kCFStringEncodingMacDevanagari,
        10 => kCFStringEncodingMacGurmukhi,
        11 => kCFStringEncodingMacGujarati,
        12 => kCFStringEncodingMacOriya,
        13 => kCFStringEncodingMacBengali,
        14 => kCFStringEncodingMacTamil,
        15 => kCFStringEncodingMacTelugu,
        16 => kCFStringEncodingMacKannada,
        17 => kCFStringEncodingMacMalayalam,
        18 => kCFStringEncodingMacSinhalese,
        19 => kCFStringEncodingMacBurmese,
        20 => kCFStringEncodingMacKhmer,
        21 => kCFStringEncodingMacThai,
        22 => kCFStringEncodingMacLaotian,
        23 => kCFStringEncodingMacGeorgian,
        24 => kCFStringEncodingMacArmenian,
        25 => kCFStringEncodingMacChineseSimp,
        26 => kCFStringEncodingMacTibetan,
        27 => kCFStringEncodingMacMongolian,
        28 => kCFStringEncodingMacEthiopic,
        29 => kCFStringEncodingMacCentralEurRoman,
        30 => kCFStringEncodingMacVietnamese,
        31 => kCFStringEncodingMacExtArabic,
        33 => kCFStringEncodingMacSymbol,
        34 => kCFStringEncodingMacDingbats,
        35 => kCFStringEncodingMacTurkish,
        36 => kCFStringEncodingMacCroatian,
        37 => kCFStringEncodingMacIcelandic,
        38 => kCFStringEncodingMacRomanian,
        39 => kCFStringEncodingMacCeltic,
        40 => kCFStringEncodingMacGaelic,
        140 => kCFStringEncodingMacFarsi,
        152 => kCFStringEncodingMacUkrainian,
        236 => kCFStringEncodingMacInuit,
        252 => kCFStringEncodingMacVT100,
        255 => kCFStringEncodingMacHFS,
        514 => kCFStringEncodingISOLatin2,
        515 => kCFStringEncodingISOLatin3,
        516 => kCFStringEncodingISOLatin4,
        517 => kCFStringEncodingISOLatinCyrillic,
        518 => kCFStringEncodingISOLatinArabic,
        519 => kCFStringEncodingISOLatinGreek,
        520 => kCFStringEncodingISOLatinHebrew,
        521 => kCFStringEncodingISOLatin5,
        522 => kCFStringEncodingISOLatin6,
        523 => kCFStringEncodingISOLatinThai,
        525 => kCFStringEncodingISOLatin7,
        526 => kCFStringEncodingISOLatin8,
        527 => kCFStringEncodingISOLatin9,
        528 => kCFStringEncodingISOLatin10,
        1024 => kCFStringEncodingDOSLatinUS,
        1029 => kCFStringEncodingDOSGreek,
        1030 => kCFStringEncodingDOSBalticRim,
        1040 => kCFStringEncodingDOSLatin1,
        1041 => kCFStringEncodingDOSGreek1,
        1042 => kCFStringEncodingDOSLatin2,
        1043 => kCFStringEncodingDOSCyrillic,
        1044 => kCFStringEncodingDOSTurkish,
        1045 => kCFStringEncodingDOSPortuguese,
        1046 => kCFStringEncodingDOSIcelandic,
        1047 => kCFStringEncodingDOSHebrew,
        1048 => kCFStringEncodingDOSCanadianFrench,
        1049 => kCFStringEncodingDOSArabic,
        1050 => kCFStringEncodingDOSNordic,
        1051 => kCFStringEncodingDOSRussian,
        1052 => kCFStringEncodingDOSGreek2,
        1053 => kCFStringEncodingDOSThai,
        1056 => kCFStringEncodingDOSJapanese,
        1057 => kCFStringEncodingDOSChineseSimplif,
        1058 => kCFStringEncodingDOSKorean,
        1059 => kCFStringEncodingDOSChineseTrad,
        1281 => kCFStringEncodingWindowsLatin2,
        1282 => kCFStringEncodingWindowsCyrillic,
        1283 => kCFStringEncodingWindowsGreek,
        1284 => kCFStringEncodingWindowsLatin5,
        1285 => kCFStringEncodingWindowsHebrew,
        1286 => kCFStringEncodingWindowsArabic,
        1287 => kCFStringEncodingWindowsBalticRim,
        1288 => kCFStringEncodingWindowsVietnamese,
        1296 => kCFStringEncodingWindowsKoreanJohab,
        1537 => kCFStringEncodingANSEL,
        1568 => kCFStringEncodingJIS_X0201_76,
        1569 => kCFStringEncodingJIS_X0208_83,
        1570 => kCFStringEncodingJIS_X0208_90,
        1571 => kCFStringEncodingJIS_X0212_90,
        1572 => kCFStringEncodingJIS_C6226_78,
        1576 => kCFStringEncodingShiftJIS_X0213,
        1577 => kCFStringEncodingShiftJIS_X0213_MenKuTen,
        1584 => kCFStringEncodingGB_2312_80,
        1585 => kCFStringEncodingGBK_95,
        1586 => kCFStringEncodingGB_18030_2000,
        1600 => kCFStringEncodingKSC_5601_87,
        1601 => kCFStringEncodingKSC_5601_92_Johab,
        1617 => kCFStringEncodingCNS_11643_92_P1,
        1618 => kCFStringEncodingCNS_11643_92_P2,
        1619 => kCFStringEncodingCNS_11643_92_P3,
        2080 => kCFStringEncodingISO_2022_JP,
        2081 => kCFStringEncodingISO_2022_JP_2,
        2082 => kCFStringEncodingISO_2022_JP_1,
        2083 => kCFStringEncodingISO_2022_JP_3,
        2096 => kCFStringEncodingISO_2022_CN,
        2097 => kCFStringEncodingISO_2022_CN_EXT,
        2112 => kCFStringEncodingISO_2022_KR,
        2336 => kCFStringEncodingEUC_JP,
        2352 => kCFStringEncodingEUC_CN,
        2353 => kCFStringEncodingEUC_TW,
        2368 => kCFStringEncodingEUC_KR,
        2561 => kCFStringEncodingShiftJIS,
        2562 => kCFStringEncodingKOI8_R,
        2563 => kCFStringEncodingBig5,
        2564 => kCFStringEncodingMacRomanLatin1,
        2565 => kCFStringEncodingHZ_GB_2312,
        2566 => kCFStringEncodingBig5_HKSCS_1999,
        2567 => kCFStringEncodingVISCII,
        2568 => kCFStringEncodingKOI8_U,
        2569 => kCFStringEncodingBig5_E,
        2818 => kCFStringEncodingNextStepJapanese,
        3073 => kCFStringEncodingEBCDIC_US,
        3074 => kCFStringEncodingEBCDIC_CP037,
        67109120 => kCFStringEncodingUTF7,
        2576 => kCFStringEncodingUTF7_IMAP,
        _ => throw ArgumentError("Unknown value for CFStringEncodings: $value"),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingShiftJIS_X0213)
      return "CFStringEncodings.kCFStringEncodingShiftJIS_X0213, CFStringEncodings.kCFStringEncodingShiftJIS_X0213_00";
    return super.toString();
  }
}

enum CFStringTokenizerTokenType {
  kCFStringTokenizerTokenNone(0),
  kCFStringTokenizerTokenNormal(1),
  kCFStringTokenizerTokenHasSubTokensMask(2),
  kCFStringTokenizerTokenHasDerivedSubTokensMask(4),
  kCFStringTokenizerTokenHasHasNumbersMask(8),
  kCFStringTokenizerTokenHasNonLettersMask(16),
  kCFStringTokenizerTokenIsCJWordMask(32);

  final int value;
  const CFStringTokenizerTokenType(this.value);

  static CFStringTokenizerTokenType fromValue(int value) => switch (value) {
        0 => kCFStringTokenizerTokenNone,
        1 => kCFStringTokenizerTokenNormal,
        2 => kCFStringTokenizerTokenHasSubTokensMask,
        4 => kCFStringTokenizerTokenHasDerivedSubTokensMask,
        8 => kCFStringTokenizerTokenHasHasNumbersMask,
        16 => kCFStringTokenizerTokenHasNonLettersMask,
        32 => kCFStringTokenizerTokenIsCJWordMask,
        _ => throw ArgumentError(
            "Unknown value for CFStringTokenizerTokenType: $value"),
      };
}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;

final class __CFStringTokenizer extends ffi.Opaque {}

enum SecCredentialType {
  kSecCredentialTypeDefault(0),
  kSecCredentialTypeWithUI(1),
  kSecCredentialTypeNoUI(2);

  final int value;
  const SecCredentialType(this.value);

  static SecCredentialType fromValue(int value) => switch (value) {
        0 => kSecCredentialTypeDefault,
        1 => kSecCredentialTypeWithUI,
        2 => kSecCredentialTypeNoUI,
        _ => throw ArgumentError("Unknown value for SecCredentialType: $value"),
      };
}

enum SecPadding {
  kSecPaddingNone(0),
  kSecPaddingPKCS1(1),
  kSecPaddingOAEP(2),
  kSecPaddingSigRaw(16384),
  kSecPaddingPKCS1MD2(32768),
  kSecPaddingPKCS1MD5(32769),
  kSecPaddingPKCS1SHA1(32770),
  kSecPaddingPKCS1SHA224(32771),
  kSecPaddingPKCS1SHA256(32772),
  kSecPaddingPKCS1SHA384(32773),
  kSecPaddingPKCS1SHA512(32774);

  final int value;
  const SecPadding(this.value);

  static SecPadding fromValue(int value) => switch (value) {
        0 => kSecPaddingNone,
        1 => kSecPaddingPKCS1,
        2 => kSecPaddingOAEP,
        16384 => kSecPaddingSigRaw,
        32768 => kSecPaddingPKCS1MD2,
        32769 => kSecPaddingPKCS1MD5,
        32770 => kSecPaddingPKCS1SHA1,
        32771 => kSecPaddingPKCS1SHA224,
        32772 => kSecPaddingPKCS1SHA256,
        32773 => kSecPaddingPKCS1SHA384,
        32774 => kSecPaddingPKCS1SHA512,
        _ => throw ArgumentError("Unknown value for SecPadding: $value"),
      };
}

enum SecKeySizes {
  kSecDefaultKeySize(0),
  kSec3DES192(192),
  kSecAES128(128),
  kSecAES256(256),
  kSecp384r1(384),
  kSecp521r1(521),
  kSecRSAMin(1024),
  kSecRSAMax(4096);

  static const kSecAES192 = kSec3DES192;
  static const kSecp192r1 = kSec3DES192;
  static const kSecp256r1 = kSecAES256;

  final int value;
  const SecKeySizes(this.value);

  static SecKeySizes fromValue(int value) => switch (value) {
        0 => kSecDefaultKeySize,
        192 => kSec3DES192,
        128 => kSecAES128,
        256 => kSecAES256,
        384 => kSecp384r1,
        521 => kSecp521r1,
        1024 => kSecRSAMin,
        4096 => kSecRSAMax,
        _ => throw ArgumentError("Unknown value for SecKeySizes: $value"),
      };

  @override
  String toString() {
    if (this == kSec3DES192)
      return "SecKeySizes.kSec3DES192, SecKeySizes.kSecAES192, SecKeySizes.kSecp192r1";
    if (this == kSecAES256)
      return "SecKeySizes.kSecAES256, SecKeySizes.kSecp256r1";
    return super.toString();
  }
}

enum SecKeyOperationType {
  kSecKeyOperationTypeSign(0),
  kSecKeyOperationTypeVerify(1),
  kSecKeyOperationTypeEncrypt(2),
  kSecKeyOperationTypeDecrypt(3),
  kSecKeyOperationTypeKeyExchange(4);

  final int value;
  const SecKeyOperationType(this.value);

  static SecKeyOperationType fromValue(int value) => switch (value) {
        0 => kSecKeyOperationTypeSign,
        1 => kSecKeyOperationTypeVerify,
        2 => kSecKeyOperationTypeEncrypt,
        3 => kSecKeyOperationTypeDecrypt,
        4 => kSecKeyOperationTypeKeyExchange,
        _ =>
          throw ArgumentError("Unknown value for SecKeyOperationType: $value"),
      };
}

final class __SecRandom extends ffi.Opaque {}

enum SecAuthenticationType {
  kSecAuthenticationTypeNTLM(1835824238),
  kSecAuthenticationTypeMSN(1634628461),
  kSecAuthenticationTypeDPA(1633775716),
  kSecAuthenticationTypeRPA(1633775730),
  kSecAuthenticationTypeHTTPBasic(1886680168),
  kSecAuthenticationTypeHTTPDigest(1685353576),
  kSecAuthenticationTypeHTMLForm(1836216166),
  kSecAuthenticationTypeDefault(1953261156),
  kSecAuthenticationTypeAny(0);

  final int value;
  const SecAuthenticationType(this.value);

  static SecAuthenticationType fromValue(int value) => switch (value) {
        1835824238 => kSecAuthenticationTypeNTLM,
        1634628461 => kSecAuthenticationTypeMSN,
        1633775716 => kSecAuthenticationTypeDPA,
        1633775730 => kSecAuthenticationTypeRPA,
        1886680168 => kSecAuthenticationTypeHTTPBasic,
        1685353576 => kSecAuthenticationTypeHTTPDigest,
        1836216166 => kSecAuthenticationTypeHTMLForm,
        1953261156 => kSecAuthenticationTypeDefault,
        0 => kSecAuthenticationTypeAny,
        _ => throw ArgumentError(
            "Unknown value for SecAuthenticationType: $value"),
      };
}

enum SecProtocolType {
  kSecProtocolTypeFTP(1718906912),
  kSecProtocolTypeFTPAccount(1718906977),
  kSecProtocolTypeHTTP(1752462448),
  kSecProtocolTypeIRC(1769104160),
  kSecProtocolTypeNNTP(1852732528),
  kSecProtocolTypePOP3(1886351411),
  kSecProtocolTypeSMTP(1936553072),
  kSecProtocolTypeSOCKS(1936685088),
  kSecProtocolTypeIMAP(1768776048),
  kSecProtocolTypeLDAP(1818517872),
  kSecProtocolTypeAppleTalk(1635019883),
  kSecProtocolTypeAFP(1634103328),
  kSecProtocolTypeTelnet(1952803950),
  kSecProtocolTypeSSH(1936943136),
  kSecProtocolTypeFTPS(1718906995),
  kSecProtocolTypeHTTPS(1752461427),
  kSecProtocolTypeHTTPProxy(1752461432),
  kSecProtocolTypeHTTPSProxy(1752462200),
  kSecProtocolTypeFTPProxy(1718907000),
  kSecProtocolTypeCIFS(1667851891),
  kSecProtocolTypeSMB(1936548384),
  kSecProtocolTypeRTSP(1920234352),
  kSecProtocolTypeRTSPProxy(1920234360),
  kSecProtocolTypeDAAP(1684103536),
  kSecProtocolTypeEPPC(1701867619),
  kSecProtocolTypeIPP(1768976416),
  kSecProtocolTypeNNTPS(1853124723),
  kSecProtocolTypeLDAPS(1818521715),
  kSecProtocolTypeTelnetS(1952803955),
  kSecProtocolTypeIMAPS(1768779891),
  kSecProtocolTypeIRCS(1769104243),
  kSecProtocolTypePOP3S(1886351475),
  kSecProtocolTypeCVSpserver(1668707184),
  kSecProtocolTypeSVN(1937141280),
  kSecProtocolTypeAny(0);

  final int value;
  const SecProtocolType(this.value);

  static SecProtocolType fromValue(int value) => switch (value) {
        1718906912 => kSecProtocolTypeFTP,
        1718906977 => kSecProtocolTypeFTPAccount,
        1752462448 => kSecProtocolTypeHTTP,
        1769104160 => kSecProtocolTypeIRC,
        1852732528 => kSecProtocolTypeNNTP,
        1886351411 => kSecProtocolTypePOP3,
        1936553072 => kSecProtocolTypeSMTP,
        1936685088 => kSecProtocolTypeSOCKS,
        1768776048 => kSecProtocolTypeIMAP,
        1818517872 => kSecProtocolTypeLDAP,
        1635019883 => kSecProtocolTypeAppleTalk,
        1634103328 => kSecProtocolTypeAFP,
        1952803950 => kSecProtocolTypeTelnet,
        1936943136 => kSecProtocolTypeSSH,
        1718906995 => kSecProtocolTypeFTPS,
        1752461427 => kSecProtocolTypeHTTPS,
        1752461432 => kSecProtocolTypeHTTPProxy,
        1752462200 => kSecProtocolTypeHTTPSProxy,
        1718907000 => kSecProtocolTypeFTPProxy,
        1667851891 => kSecProtocolTypeCIFS,
        1936548384 => kSecProtocolTypeSMB,
        1920234352 => kSecProtocolTypeRTSP,
        1920234360 => kSecProtocolTypeRTSPProxy,
        1684103536 => kSecProtocolTypeDAAP,
        1701867619 => kSecProtocolTypeEPPC,
        1768976416 => kSecProtocolTypeIPP,
        1853124723 => kSecProtocolTypeNNTPS,
        1818521715 => kSecProtocolTypeLDAPS,
        1952803955 => kSecProtocolTypeTelnetS,
        1768779891 => kSecProtocolTypeIMAPS,
        1769104243 => kSecProtocolTypeIRCS,
        1886351475 => kSecProtocolTypePOP3S,
        1668707184 => kSecProtocolTypeCVSpserver,
        1937141280 => kSecProtocolTypeSVN,
        0 => kSecProtocolTypeAny,
        _ => throw ArgumentError("Unknown value for SecProtocolType: $value"),
      };
}

enum SecKeychainEvent {
  kSecLockEvent(1),
  kSecUnlockEvent(2),
  kSecAddEvent(3),
  kSecDeleteEvent(4),
  kSecUpdateEvent(5),
  kSecPasswordChangedEvent(6),
  kSecDefaultChangedEvent(9),
  kSecDataAccessEvent(10),
  kSecKeychainListChangedEvent(11),
  kSecTrustSettingsChangedEvent(12);

  final int value;
  const SecKeychainEvent(this.value);

  static SecKeychainEvent fromValue(int value) => switch (value) {
        1 => kSecLockEvent,
        2 => kSecUnlockEvent,
        3 => kSecAddEvent,
        4 => kSecDeleteEvent,
        5 => kSecUpdateEvent,
        6 => kSecPasswordChangedEvent,
        9 => kSecDefaultChangedEvent,
        10 => kSecDataAccessEvent,
        11 => kSecKeychainListChangedEvent,
        12 => kSecTrustSettingsChangedEvent,
        _ => throw ArgumentError("Unknown value for SecKeychainEvent: $value"),
      };
}

enum SecKeychainEventMask {
  kSecLockEventMask(2),
  kSecUnlockEventMask(4),
  kSecAddEventMask(8),
  kSecDeleteEventMask(16),
  kSecUpdateEventMask(32),
  kSecPasswordChangedEventMask(64),
  kSecDefaultChangedEventMask(512),
  kSecDataAccessEventMask(1024),
  kSecKeychainListChangedMask(2048),
  kSecTrustSettingsChangedEventMask(4096),
  kSecEveryEventMask(-1);

  final int value;
  const SecKeychainEventMask(this.value);

  static SecKeychainEventMask fromValue(int value) => switch (value) {
        2 => kSecLockEventMask,
        4 => kSecUnlockEventMask,
        8 => kSecAddEventMask,
        16 => kSecDeleteEventMask,
        32 => kSecUpdateEventMask,
        64 => kSecPasswordChangedEventMask,
        512 => kSecDefaultChangedEventMask,
        1024 => kSecDataAccessEventMask,
        2048 => kSecKeychainListChangedMask,
        4096 => kSecTrustSettingsChangedEventMask,
        -1 => kSecEveryEventMask,
        _ =>
          throw ArgumentError("Unknown value for SecKeychainEventMask: $value"),
      };
}

enum SecPreferencesDomain {
  kSecPreferencesDomainUser(0),
  kSecPreferencesDomainSystem(1),
  kSecPreferencesDomainCommon(2),
  kSecPreferencesDomainDynamic(3);

  final int value;
  const SecPreferencesDomain(this.value);

  static SecPreferencesDomain fromValue(int value) => switch (value) {
        0 => kSecPreferencesDomainUser,
        1 => kSecPreferencesDomainSystem,
        2 => kSecPreferencesDomainCommon,
        3 => kSecPreferencesDomainDynamic,
        _ =>
          throw ArgumentError("Unknown value for SecPreferencesDomain: $value"),
      };
}

enum SecExternalFormat {
  kSecFormatUnknown(0),
  kSecFormatOpenSSL(1),
  kSecFormatSSH(2),
  kSecFormatBSAFE(3),
  kSecFormatRawKey(4),
  kSecFormatWrappedPKCS8(5),
  kSecFormatWrappedOpenSSL(6),
  kSecFormatWrappedSSH(7),
  kSecFormatWrappedLSH(8),
  kSecFormatX509Cert(9),
  kSecFormatPEMSequence(10),
  kSecFormatPKCS7(11),
  kSecFormatPKCS12(12),
  kSecFormatNetscapeCertSequence(13),
  kSecFormatSSHv2(14);

  final int value;
  const SecExternalFormat(this.value);

  static SecExternalFormat fromValue(int value) => switch (value) {
        0 => kSecFormatUnknown,
        1 => kSecFormatOpenSSL,
        2 => kSecFormatSSH,
        3 => kSecFormatBSAFE,
        4 => kSecFormatRawKey,
        5 => kSecFormatWrappedPKCS8,
        6 => kSecFormatWrappedOpenSSL,
        7 => kSecFormatWrappedSSH,
        8 => kSecFormatWrappedLSH,
        9 => kSecFormatX509Cert,
        10 => kSecFormatPEMSequence,
        11 => kSecFormatPKCS7,
        12 => kSecFormatPKCS12,
        13 => kSecFormatNetscapeCertSequence,
        14 => kSecFormatSSHv2,
        _ => throw ArgumentError("Unknown value for SecExternalFormat: $value"),
      };
}

enum SecExternalItemType {
  kSecItemTypeUnknown(0),
  kSecItemTypePrivateKey(1),
  kSecItemTypePublicKey(2),
  kSecItemTypeSessionKey(3),
  kSecItemTypeCertificate(4),
  kSecItemTypeAggregate(5);

  final int value;
  const SecExternalItemType(this.value);

  static SecExternalItemType fromValue(int value) => switch (value) {
        0 => kSecItemTypeUnknown,
        1 => kSecItemTypePrivateKey,
        2 => kSecItemTypePublicKey,
        3 => kSecItemTypeSessionKey,
        4 => kSecItemTypeCertificate,
        5 => kSecItemTypeAggregate,
        _ =>
          throw ArgumentError("Unknown value for SecExternalItemType: $value"),
      };
}

enum SecItemImportExportFlags {
  none(0),
  kSecItemPemArmour(1);

  final int value;
  const SecItemImportExportFlags(this.value);

  static SecItemImportExportFlags fromValue(int value) => switch (value) {
        0 => none,
        1 => kSecItemPemArmour,
        _ => throw ArgumentError(
            "Unknown value for SecItemImportExportFlags: $value"),
      };
}

enum SecKeyImportExportFlags {
  kSecKeyImportOnlyOne(1),
  kSecKeySecurePassphrase(2),
  kSecKeyNoAccessControl(4);

  final int value;
  const SecKeyImportExportFlags(this.value);

  static SecKeyImportExportFlags fromValue(int value) => switch (value) {
        1 => kSecKeyImportOnlyOne,
        2 => kSecKeySecurePassphrase,
        4 => kSecKeyNoAccessControl,
        _ => throw ArgumentError(
            "Unknown value for SecKeyImportExportFlags: $value"),
      };
}

final class SecItemImportExportKeyParameters extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @ffi.Uint32()
  external int flagsAsInt;

  SecKeyImportExportFlags get flags =>
      SecKeyImportExportFlags.fromValue(flagsAsInt);

  external CFTypeRef passphrase;

  external CFStringRef alertTitle;

  external CFStringRef alertPrompt;

  external ffi.Pointer<__SecAccess> accessRef;

  external ffi.Pointer<__CFArray> keyUsage;

  external ffi.Pointer<__CFArray> keyAttributes;
}

final class __SecAccess extends ffi.Opaque {}

final class __SecKeychain extends ffi.Opaque {}

enum SecTrustResultType {
  kSecTrustResultInvalid(0),
  kSecTrustResultProceed(1),
  kSecTrustResultConfirm(2),
  kSecTrustResultDeny(3),
  kSecTrustResultUnspecified(4),
  kSecTrustResultRecoverableTrustFailure(5),
  kSecTrustResultFatalTrustFailure(6),
  kSecTrustResultOtherError(7);

  final int value;
  const SecTrustResultType(this.value);

  static SecTrustResultType fromValue(int value) => switch (value) {
        0 => kSecTrustResultInvalid,
        1 => kSecTrustResultProceed,
        2 => kSecTrustResultConfirm,
        3 => kSecTrustResultDeny,
        4 => kSecTrustResultUnspecified,
        5 => kSecTrustResultRecoverableTrustFailure,
        6 => kSecTrustResultFatalTrustFailure,
        7 => kSecTrustResultOtherError,
        _ =>
          throw ArgumentError("Unknown value for SecTrustResultType: $value"),
      };
}

enum SecTrustOptionFlags {
  kSecTrustOptionAllowExpired(1),
  kSecTrustOptionLeafIsCA(2),
  kSecTrustOptionFetchIssuerFromNet(4),
  kSecTrustOptionAllowExpiredRoot(8),
  kSecTrustOptionRequireRevPerCert(16),
  kSecTrustOptionUseTrustSettings(32),
  kSecTrustOptionImplicitAnchors(64);

  final int value;
  const SecTrustOptionFlags(this.value);

  static SecTrustOptionFlags fromValue(int value) => switch (value) {
        1 => kSecTrustOptionAllowExpired,
        2 => kSecTrustOptionLeafIsCA,
        4 => kSecTrustOptionFetchIssuerFromNet,
        8 => kSecTrustOptionAllowExpiredRoot,
        16 => kSecTrustOptionRequireRevPerCert,
        32 => kSecTrustOptionUseTrustSettings,
        64 => kSecTrustOptionImplicitAnchors,
        _ =>
          throw ArgumentError("Unknown value for SecTrustOptionFlags: $value"),
      };
}

enum SecKeychainPromptSelector {
  kSecKeychainPromptRequirePassphase(1),
  kSecKeychainPromptUnsigned(16),
  kSecKeychainPromptUnsignedAct(32),
  kSecKeychainPromptInvalid(64),
  kSecKeychainPromptInvalidAct(128);

  final int value;
  const SecKeychainPromptSelector(this.value);

  static SecKeychainPromptSelector fromValue(int value) => switch (value) {
        1 => kSecKeychainPromptRequirePassphase,
        16 => kSecKeychainPromptUnsigned,
        32 => kSecKeychainPromptUnsignedAct,
        64 => kSecKeychainPromptInvalid,
        128 => kSecKeychainPromptInvalidAct,
        _ => throw ArgumentError(
            "Unknown value for SecKeychainPromptSelector: $value"),
      };
}

typedef SecIdentitySearchRef = ffi.Pointer<OpaqueSecIdentitySearchRef>;

final class OpaqueSecIdentitySearchRef extends ffi.Opaque {}

enum SecItemClass {
  kSecInternetPasswordItemClass(1768842612),
  kSecGenericPasswordItemClass(1734700656),
  kSecAppleSharePasswordItemClass(1634953328),
  kSecCertificateItemClass(-2147479552),
  kSecPublicKeyItemClass(15),
  kSecPrivateKeyItemClass(16),
  kSecSymmetricKeyItemClass(17);

  final int value;
  const SecItemClass(this.value);

  static SecItemClass fromValue(int value) => switch (value) {
        1768842612 => kSecInternetPasswordItemClass,
        1734700656 => kSecGenericPasswordItemClass,
        1634953328 => kSecAppleSharePasswordItemClass,
        -2147479552 => kSecCertificateItemClass,
        15 => kSecPublicKeyItemClass,
        16 => kSecPrivateKeyItemClass,
        17 => kSecSymmetricKeyItemClass,
        _ => throw ArgumentError("Unknown value for SecItemClass: $value"),
      };
}

enum SecItemAttr {
  kSecCreationDateItemAttr(1667522932),
  kSecModDateItemAttr(1835295092),
  kSecDescriptionItemAttr(1684370275),
  kSecCommentItemAttr(1768123764),
  kSecCreatorItemAttr(1668445298),
  kSecTypeItemAttr(1954115685),
  kSecScriptCodeItemAttr(1935897200),
  kSecLabelItemAttr(1818321516),
  kSecInvisibleItemAttr(1768846953),
  kSecNegativeItemAttr(1852139361),
  kSecCustomIconItemAttr(1668641641),
  kSecAccountItemAttr(1633903476),
  kSecServiceItemAttr(1937138533),
  kSecGenericItemAttr(1734700641),
  kSecSecurityDomainItemAttr(1935961454),
  kSecServerItemAttr(1936881266),
  kSecAuthenticationTypeItemAttr(1635023216),
  kSecPortItemAttr(1886351988),
  kSecPathItemAttr(1885434984),
  kSecVolumeItemAttr(1986817381),
  kSecAddressItemAttr(1633969266),
  kSecSignatureItemAttr(1936943463),
  kSecProtocolItemAttr(1886675820),
  kSecCertificateType(1668577648),
  kSecCertificateEncoding(1667591779),
  kSecCrlType(1668445296),
  kSecCrlEncoding(1668443747),
  kSecAlias(1634494835);

  final int value;
  const SecItemAttr(this.value);

  static SecItemAttr fromValue(int value) => switch (value) {
        1667522932 => kSecCreationDateItemAttr,
        1835295092 => kSecModDateItemAttr,
        1684370275 => kSecDescriptionItemAttr,
        1768123764 => kSecCommentItemAttr,
        1668445298 => kSecCreatorItemAttr,
        1954115685 => kSecTypeItemAttr,
        1935897200 => kSecScriptCodeItemAttr,
        1818321516 => kSecLabelItemAttr,
        1768846953 => kSecInvisibleItemAttr,
        1852139361 => kSecNegativeItemAttr,
        1668641641 => kSecCustomIconItemAttr,
        1633903476 => kSecAccountItemAttr,
        1937138533 => kSecServiceItemAttr,
        1734700641 => kSecGenericItemAttr,
        1935961454 => kSecSecurityDomainItemAttr,
        1936881266 => kSecServerItemAttr,
        1635023216 => kSecAuthenticationTypeItemAttr,
        1886351988 => kSecPortItemAttr,
        1885434984 => kSecPathItemAttr,
        1986817381 => kSecVolumeItemAttr,
        1633969266 => kSecAddressItemAttr,
        1936943463 => kSecSignatureItemAttr,
        1886675820 => kSecProtocolItemAttr,
        1668577648 => kSecCertificateType,
        1667591779 => kSecCertificateEncoding,
        1668445296 => kSecCrlType,
        1668443747 => kSecCrlEncoding,
        1634494835 => kSecAlias,
        _ => throw ArgumentError("Unknown value for SecItemAttr: $value"),
      };
}

enum SecTrustSettingsKeyUsage {
  kSecTrustSettingsKeyUseSignature(1),
  kSecTrustSettingsKeyUseEnDecryptData(2),
  kSecTrustSettingsKeyUseEnDecryptKey(4),
  kSecTrustSettingsKeyUseSignCert(8),
  kSecTrustSettingsKeyUseSignRevocation(16),
  kSecTrustSettingsKeyUseKeyExchange(32),
  kSecTrustSettingsKeyUseAny(-1);

  final int value;
  const SecTrustSettingsKeyUsage(this.value);

  static SecTrustSettingsKeyUsage fromValue(int value) => switch (value) {
        1 => kSecTrustSettingsKeyUseSignature,
        2 => kSecTrustSettingsKeyUseEnDecryptData,
        4 => kSecTrustSettingsKeyUseEnDecryptKey,
        8 => kSecTrustSettingsKeyUseSignCert,
        16 => kSecTrustSettingsKeyUseSignRevocation,
        32 => kSecTrustSettingsKeyUseKeyExchange,
        -1 => kSecTrustSettingsKeyUseAny,
        _ => throw ArgumentError(
            "Unknown value for SecTrustSettingsKeyUsage: $value"),
      };
}

enum SecTrustSettingsResult {
  kSecTrustSettingsResultInvalid(0),
  kSecTrustSettingsResultTrustRoot(1),
  kSecTrustSettingsResultTrustAsRoot(2),
  kSecTrustSettingsResultDeny(3),
  kSecTrustSettingsResultUnspecified(4);

  final int value;
  const SecTrustSettingsResult(this.value);

  static SecTrustSettingsResult fromValue(int value) => switch (value) {
        0 => kSecTrustSettingsResultInvalid,
        1 => kSecTrustSettingsResultTrustRoot,
        2 => kSecTrustSettingsResultTrustAsRoot,
        3 => kSecTrustSettingsResultDeny,
        4 => kSecTrustSettingsResultUnspecified,
        _ => throw ArgumentError(
            "Unknown value for SecTrustSettingsResult: $value"),
      };
}

enum SecTrustSettingsDomain {
  kSecTrustSettingsDomainUser(0),
  kSecTrustSettingsDomainAdmin(1),
  kSecTrustSettingsDomainSystem(2);

  final int value;
  const SecTrustSettingsDomain(this.value);

  static SecTrustSettingsDomain fromValue(int value) => switch (value) {
        0 => kSecTrustSettingsDomainUser,
        1 => kSecTrustSettingsDomainAdmin,
        2 => kSecTrustSettingsDomainSystem,
        _ => throw ArgumentError(
            "Unknown value for SecTrustSettingsDomain: $value"),
      };
}

enum SecCSFlags {
  kSecCSDefaultFlags(0),
  kSecCSConsiderExpiration(-2147483648),
  kSecCSEnforceRevocationChecks(1073741824),
  kSecCSNoNetworkAccess(536870912),
  kSecCSReportProgress(268435456),
  kSecCSCheckTrustedAnchors(134217728),
  kSecCSQuickCheck(67108864),
  kSecCSApplyEmbeddedPolicy(33554432),
  kSecCSStripDisallowedXattrs(16777216),
  kSecCSMatchGuestRequirementInKernel(8388608);

  final int value;
  const SecCSFlags(this.value);

  static SecCSFlags fromValue(int value) => switch (value) {
        0 => kSecCSDefaultFlags,
        -2147483648 => kSecCSConsiderExpiration,
        1073741824 => kSecCSEnforceRevocationChecks,
        536870912 => kSecCSNoNetworkAccess,
        268435456 => kSecCSReportProgress,
        134217728 => kSecCSCheckTrustedAnchors,
        67108864 => kSecCSQuickCheck,
        33554432 => kSecCSApplyEmbeddedPolicy,
        16777216 => kSecCSStripDisallowedXattrs,
        8388608 => kSecCSMatchGuestRequirementInKernel,
        _ => throw ArgumentError("Unknown value for SecCSFlags: $value"),
      };
}

enum SecCodeSignatureFlags {
  kSecCodeSignatureHost(1),
  kSecCodeSignatureAdhoc(2),
  kSecCodeSignatureForceHard(256),
  kSecCodeSignatureForceKill(512),
  kSecCodeSignatureForceExpiration(1024),
  kSecCodeSignatureRestrict(2048),
  kSecCodeSignatureEnforcement(4096),
  kSecCodeSignatureLibraryValidation(8192),
  kSecCodeSignatureRuntime(65536),
  kSecCodeSignatureLinkerSigned(131072);

  final int value;
  const SecCodeSignatureFlags(this.value);

  static SecCodeSignatureFlags fromValue(int value) => switch (value) {
        1 => kSecCodeSignatureHost,
        2 => kSecCodeSignatureAdhoc,
        256 => kSecCodeSignatureForceHard,
        512 => kSecCodeSignatureForceKill,
        1024 => kSecCodeSignatureForceExpiration,
        2048 => kSecCodeSignatureRestrict,
        4096 => kSecCodeSignatureEnforcement,
        8192 => kSecCodeSignatureLibraryValidation,
        65536 => kSecCodeSignatureRuntime,
        131072 => kSecCodeSignatureLinkerSigned,
        _ => throw ArgumentError(
            "Unknown value for SecCodeSignatureFlags: $value"),
      };
}

enum SecCodeStatus {
  kSecCodeStatusValid(1),
  kSecCodeStatusHard(256),
  kSecCodeStatusKill(512),
  kSecCodeStatusDebugged(268435456),
  kSecCodeStatusPlatform(67108864);

  final int value;
  const SecCodeStatus(this.value);

  static SecCodeStatus fromValue(int value) => switch (value) {
        1 => kSecCodeStatusValid,
        256 => kSecCodeStatusHard,
        512 => kSecCodeStatusKill,
        268435456 => kSecCodeStatusDebugged,
        67108864 => kSecCodeStatusPlatform,
        _ => throw ArgumentError("Unknown value for SecCodeStatus: $value"),
      };
}

enum SecRequirementType {
  kSecHostRequirementType(1),
  kSecGuestRequirementType(2),
  kSecDesignatedRequirementType(3),
  kSecLibraryRequirementType(4),
  kSecPluginRequirementType(5),
  kSecInvalidRequirementType(6);

  static const kSecRequirementTypeCount = kSecInvalidRequirementType;

  final int value;
  const SecRequirementType(this.value);

  static SecRequirementType fromValue(int value) => switch (value) {
        1 => kSecHostRequirementType,
        2 => kSecGuestRequirementType,
        3 => kSecDesignatedRequirementType,
        4 => kSecLibraryRequirementType,
        5 => kSecPluginRequirementType,
        6 => kSecInvalidRequirementType,
        _ =>
          throw ArgumentError("Unknown value for SecRequirementType: $value"),
      };

  @override
  String toString() {
    if (this == kSecInvalidRequirementType)
      return "SecRequirementType.kSecInvalidRequirementType, SecRequirementType.kSecRequirementTypeCount";
    return super.toString();
  }
}

enum SecCSDigestAlgorithm {
  kSecCodeSignatureNoHash(0),
  kSecCodeSignatureHashSHA1(1),
  kSecCodeSignatureHashSHA256(2),
  kSecCodeSignatureHashSHA256Truncated(3),
  kSecCodeSignatureHashSHA384(4),
  kSecCodeSignatureHashSHA512(5);

  final int value;
  const SecCSDigestAlgorithm(this.value);

  static SecCSDigestAlgorithm fromValue(int value) => switch (value) {
        0 => kSecCodeSignatureNoHash,
        1 => kSecCodeSignatureHashSHA1,
        2 => kSecCodeSignatureHashSHA256,
        3 => kSecCodeSignatureHashSHA256Truncated,
        4 => kSecCodeSignatureHashSHA384,
        5 => kSecCodeSignatureHashSHA512,
        _ =>
          throw ArgumentError("Unknown value for SecCSDigestAlgorithm: $value"),
      };
}

enum SecTransformMetaAttributeType {
  kSecTransformMetaAttributeValue(0),
  kSecTransformMetaAttributeName(1),
  kSecTransformMetaAttributeRef(2),
  kSecTransformMetaAttributeRequired(3),
  kSecTransformMetaAttributeRequiresOutboundConnection(4),
  kSecTransformMetaAttributeDeferred(5),
  kSecTransformMetaAttributeStream(6),
  kSecTransformMetaAttributeCanCycle(7),
  kSecTransformMetaAttributeExternalize(8),
  kSecTransformMetaAttributeHasOutboundConnections(9),
  kSecTransformMetaAttributeHasInboundConnection(10);

  final int value;
  const SecTransformMetaAttributeType(this.value);

  static SecTransformMetaAttributeType fromValue(int value) => switch (value) {
        0 => kSecTransformMetaAttributeValue,
        1 => kSecTransformMetaAttributeName,
        2 => kSecTransformMetaAttributeRef,
        3 => kSecTransformMetaAttributeRequired,
        4 => kSecTransformMetaAttributeRequiresOutboundConnection,
        5 => kSecTransformMetaAttributeDeferred,
        6 => kSecTransformMetaAttributeStream,
        7 => kSecTransformMetaAttributeCanCycle,
        8 => kSecTransformMetaAttributeExternalize,
        9 => kSecTransformMetaAttributeHasOutboundConnections,
        10 => kSecTransformMetaAttributeHasInboundConnection,
        _ => throw ArgumentError(
            "Unknown value for SecTransformMetaAttributeType: $value"),
      };
}

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSecCSUnimplemented = -67072;

const int errSecCSInvalidObjectRef = -67071;

const int errSecCSInvalidFlags = -67070;

const int errSecCSObjectRequired = -67069;

const int errSecCSStaticCodeNotFound = -67068;

const int errSecCSUnsupportedGuestAttributes = -67067;

const int errSecCSInvalidAttributeValues = -67066;

const int errSecCSNoSuchCode = -67065;

const int errSecCSMultipleGuests = -67064;

const int errSecCSGuestInvalid = -67063;

const int errSecCSUnsigned = -67062;

const int errSecCSSignatureFailed = -67061;

const int errSecCSSignatureNotVerifiable = -67060;

const int errSecCSSignatureUnsupported = -67059;

const int errSecCSBadDictionaryFormat = -67058;

const int errSecCSResourcesNotSealed = -67057;

const int errSecCSResourcesNotFound = -67056;

const int errSecCSResourcesInvalid = -67055;

const int errSecCSBadResource = -67054;

const int errSecCSResourceRulesInvalid = -67053;

const int errSecCSReqInvalid = -67052;

const int errSecCSReqUnsupported = -67051;

const int errSecCSReqFailed = -67050;

const int errSecCSBadObjectFormat = -67049;

const int errSecCSInternalError = -67048;

const int errSecCSHostReject = -67047;

const int errSecCSNotAHost = -67046;

const int errSecCSSignatureInvalid = -67045;

const int errSecCSHostProtocolRelativePath = -67044;

const int errSecCSHostProtocolContradiction = -67043;

const int errSecCSHostProtocolDedicationError = -67042;

const int errSecCSHostProtocolNotProxy = -67041;

const int errSecCSHostProtocolStateError = -67040;

const int errSecCSHostProtocolUnrelated = -67039;

const int errSecCSNotSupported = -67037;

const int errSecCSCMSTooLarge = -67036;

const int errSecCSHostProtocolInvalidHash = -67035;

const int errSecCSStaticCodeChanged = -67034;

const int errSecCSDBDenied = -67033;

const int errSecCSDBAccess = -67032;

const int errSecCSSigDBDenied = -67033;

const int errSecCSSigDBAccess = -67032;

const int errSecCSHostProtocolInvalidAttribute = -67031;

const int errSecCSInfoPlistFailed = -67030;

const int errSecCSNoMainExecutable = -67029;

const int errSecCSBadBundleFormat = -67028;

const int errSecCSNoMatches = -67027;

const int errSecCSFileHardQuarantined = -67026;

const int errSecCSOutdated = -67025;

const int errSecCSDbCorrupt = -67024;

const int errSecCSResourceDirectoryFailed = -67023;

const int errSecCSUnsignedNestedCode = -67022;

const int errSecCSBadNestedCode = -67021;

const int errSecCSBadCallbackValue = -67020;

const int errSecCSHelperFailed = -67019;

const int errSecCSVetoed = -67018;

const int errSecCSBadLVArch = -67017;

const int errSecCSResourceNotSupported = -67016;

const int errSecCSRegularFile = -67015;

const int errSecCSUnsealedAppRoot = -67014;

const int errSecCSWeakResourceRules = -67013;

const int errSecCSDSStoreSymlink = -67012;

const int errSecCSAmbiguousBundleFormat = -67011;

const int errSecCSBadMainExecutable = -67010;

const int errSecCSBadFrameworkVersion = -67009;

const int errSecCSUnsealedFrameworkRoot = -67008;

const int errSecCSWeakResourceEnvelope = -67007;

const int errSecCSCancelled = -67006;

const int errSecCSInvalidPlatform = -67005;

const int errSecCSTooBig = -67004;

const int errSecCSInvalidSymlink = -67003;

const int errSecCSNotAppLike = -67002;

const int errSecCSBadDiskImageFormat = -67001;

const int errSecCSUnsupportedDigestAlgorithm = -67000;

const int errSecCSInvalidAssociatedFileData = -66999;

const int errSecCSInvalidTeamIdentifier = -66998;

const int errSecCSBadTeamIdentifier = -66997;

const int errSecCSSignatureUntrusted = -66996;

const int errSecMultipleExecSegments = -66995;

const int errSecCSInvalidEntitlements = -66994;

const int errSecCSInvalidRuntimeVersion = -66993;

const int errSecCSRevokedNotarization = -66992;

const int errSecCSCMSConstructionFailed = -66991;

const int errSecCSRemoteSignerFailed = -66990;
